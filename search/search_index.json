{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"clap-py","text":"<p>Welcome to the docs for clap-py. <code>clap-py</code> is not 1.0 yet (see TODOs), but there probably wouldn't be any significant changes to the API.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>$ pip install git+https://github.com/adityasz/clap-py.git\n</code></pre> <p>If you are using uv, you can do</p> <pre><code>$ uv add git+https://github.com/adityasz/clap-py.git\n</code></pre>"},{"location":"#clap-py-usage","title":"clap-py Usage","text":"<p>Check out the Quickstart Guide.</p>"},{"location":"actions/","title":"Actions","text":""},{"location":"actions/#clap.ArgAction","title":"clap.ArgAction","text":"<p>               Bases: <code>StrEnum</code></p> <p>Classes:</p> <ul> <li> <code>Help</code>           \u2013            <p>When encountered, display help information.</p> </li> <li> <code>HelpLong</code>           \u2013            <p>When encountered, display long help information.</p> </li> <li> <code>HelpShort</code>           \u2013            <p>When encountered, display short help information.</p> </li> <li> <code>Version</code>           \u2013            <p>When encountered, display version information.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>Append</code>           \u2013            <p>When encountered, store the associated value(s) in a <code>list</code>.</p> </li> <li> <code>Count</code>           \u2013            <p>When encountered, increment an <code>int</code> counter starting from <code>0</code>.</p> </li> <li> <code>Set</code>           \u2013            <p>When encountered, store the associated value(s).</p> </li> <li> <code>SetFalse</code>           \u2013            <p>When encountered, act as if <code>False</code> was encountered on the command-line.</p> </li> <li> <code>SetTrue</code>           \u2013            <p>When encountered, act as if <code>True</code> was encountered on the command-line.</p> </li> </ul>"},{"location":"actions/#clap.ArgAction.Append","title":"Append  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Append = 'append'\n</code></pre> <p>When encountered, store the associated value(s) in a <code>list</code>.</p> <p>Example:</p> <pre><code>import clap\nfrom clap import ArgAction, long\n\n@clap.command\nclass Cli(clap.Parser):\n    files: list[str] = arg(long, action=ArgAction.Append)\n\nargs = Cli.parse([\"--files\", \"a.txt\", \"--files\", \"b.txt\"])\nassert args.files == [\"a.txt\", \"b.txt\"]\n\nargs = Cli.parse([])\nassert args.files == []\n</code></pre>"},{"location":"actions/#clap.ArgAction.Count","title":"Count  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Count = 'count'\n</code></pre> <p>When encountered, increment an <code>int</code> counter starting from <code>0</code>.</p> <p>Example:</p> <pre><code>import clap\nfrom clap import ArgAction, short\n\n@clap.command\nclass Cli(clap.Parser):\n    verbose: int = arg(short, action=ArgAction.Count)\n\nargs = Cli.parse([\"-vvv\"])\nassert args.verbose == 3\n\nargs = Cli.parse([])\nassert args.verbose == 0\n</code></pre>"},{"location":"actions/#clap.ArgAction.Set","title":"Set  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Set = 'store'\n</code></pre> <p>When encountered, store the associated value(s).</p> <p>Example:</p> <pre><code>import clap\nfrom clap import ArgAction, long\n\n@clap.command\nclass Cli(clap.Parser):\n    output: str = arg(long, action=ArgAction.Set)\n\nargs = Cli.parse([\"--output\", \"file.txt\"])\nassert args.output == \"file.txt\"\n</code></pre>"},{"location":"actions/#clap.ArgAction.SetFalse","title":"SetFalse  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SetFalse = 'store_false'\n</code></pre> <p>When encountered, act as if <code>False</code> was encountered on the command-line.</p> <p>Example:</p> <pre><code>import clap\nfrom clap import ArgAction, long\n\n@clap.command\nclass Cli(clap.Parser):\n    quiet: bool = arg(long, action=ArgAction.SetFalse)\n\nargs = Cli.parse([\"--quiet\"])\nassert args.quiet == False\n\nargs = Cli.parse([])\nassert args.quiet == True\n</code></pre>"},{"location":"actions/#clap.ArgAction.SetTrue","title":"SetTrue  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SetTrue = 'store_true'\n</code></pre> <p>When encountered, act as if <code>True</code> was encountered on the command-line.</p> <p>Example:</p> <pre><code>import clap\nfrom clap import ArgAction, long\n\n@clap.command\nclass Cli(clap.Parser):\n    verbose: bool = arg(long, action=ArgAction.SetTrue)\n\nargs = Cli.parse([\"--verbose\"])\nassert args.verbose == True\n\nargs = Cli.parse([])\nassert args.verbose == False\n</code></pre>"},{"location":"actions/#clap.ArgAction.Help","title":"Help","text":"<pre><code>Help(option_strings: Sequence[str], dest: str, **_)\n</code></pre> <p>               Bases: <code>Action</code></p> <p>When encountered, display help information.</p> <p>Depending on the flag, <code>long_help</code> may be shown.</p> Source code in <code>clap/core.py</code> <pre><code>def __init__(self, option_strings: Sequence[str], dest: str, **_):\n    super().__init__(option_strings, dest, nargs=0)\n</code></pre>"},{"location":"actions/#clap.ArgAction.HelpLong","title":"HelpLong","text":"<pre><code>HelpLong(option_strings: Sequence[str], dest: str, **_)\n</code></pre> <p>               Bases: <code>Action</code></p> <p>When encountered, display long help information.</p> Source code in <code>clap/core.py</code> <pre><code>def __init__(self, option_strings: Sequence[str], dest: str, **_):\n    super().__init__(option_strings, dest, nargs=0)\n</code></pre>"},{"location":"actions/#clap.ArgAction.HelpShort","title":"HelpShort","text":"<pre><code>HelpShort(option_strings: Sequence[str], dest: str, **_)\n</code></pre> <p>               Bases: <code>Action</code></p> <p>When encountered, display short help information.</p> Source code in <code>clap/core.py</code> <pre><code>def __init__(self, option_strings: Sequence[str], dest: str, **_):\n    super().__init__(option_strings, dest, nargs=0)\n</code></pre>"},{"location":"actions/#clap.ArgAction.Version","title":"Version","text":"<pre><code>Version(option_strings, dest, **kwargs)\n</code></pre> <p>               Bases: <code>Action</code></p> <p>When encountered, display version information.</p> <p>Depending on the flag, <code>long_version</code> may be shown.</p> Source code in <code>clap/core.py</code> <pre><code>def __init__(self, option_strings, dest, **kwargs):\n    super().__init__(option_strings, dest, nargs=0)\n</code></pre>"},{"location":"arg/","title":"arg","text":"<p><code>arg()</code> returns an <code>Arg</code> object. However, the type stub for this function has return type <code>Any</code>. This way, the type checker does not complain, and the library gets complete information without inspecting the AST.</p>"},{"location":"arg/#clap.arg","title":"clap.arg","text":"<pre><code>arg(\n    short_or_long: Optional[AutoFlag] = None,\n    long_or_short: Optional[AutoFlag] = None,\n    /,\n    *,\n    short: Optional[Union[str, bool]] = None,\n    long: Optional[Union[str, bool]] = None,\n    aliases: Optional[Sequence[str]] = None,\n    group: Optional[Group] = None,\n    mutex: Optional[MutexGroup] = None,\n    action: Optional[Union[type, ArgAction]] = None,\n    num_args: Optional[NargsType] = None,\n    default_missing_value: Optional[U] = None,\n    default_value: Optional[U] = None,\n    choices: Optional[Sequence[str]] = None,\n    required: Optional[bool] = None,\n    help: Optional[str] = None,\n    long_help: Optional[str] = None,\n    value_name: Optional[str] = None,\n    deprecated: bool = False,\n) -&gt; Any\n</code></pre> <p>Create a command-line argument.</p> <p>Parameters:</p> <ul> <li> <code>short_or_long</code>               (<code>Optional[AutoFlag]</code>, default:                   <code>None</code> )           \u2013            <p>Use <code>clap.short</code> or <code>clap.long</code> to automatically create the short or long version of the argument.</p> </li> <li> <code>long_or_short</code>               (<code>Optional[AutoFlag]</code>, default:                   <code>None</code> )           \u2013            <p>Use <code>clap.short</code> or <code>clap.long</code> to automatically create the short or long version of the argument.</p> </li> <li> <code>short</code>               (<code>Optional[Union[str, bool]]</code>, default:                   <code>None</code> )           \u2013            <p>The short version of the argument without the preceding <code>-</code>. Specify <code>True</code> to automatically create it.</p> </li> <li> <code>long</code>               (<code>Optional[Union[str, bool]]</code>, default:                   <code>None</code> )           \u2013            <p>The long version of the argument without the preceding <code>--</code>. Specify <code>True</code> to automatically create it.</p> </li> <li> <code>aliases</code>               (<code>Optional[Sequence[str]]</code>, default:                   <code>None</code> )           \u2013            <p>Additional flags for the argument.</p> </li> <li> <code>group</code>               (<code>Optional[Group]</code>, default:                   <code>None</code> )           \u2013            <p>The group to which the argument is added.</p> </li> <li> <code>mutex</code>               (<code>Optional[MutexGroup]</code>, default:                   <code>None</code> )           \u2013            <p>The mutually exclusive group to which the argument is added.</p> </li> <li> <code>action</code>               (<code>Optional[Union[type, ArgAction]]</code>, default:                   <code>None</code> )           \u2013            <p>How to react to an argument when parsing it.</p> </li> <li> <code>num_args</code>               (<code>Optional[NargsType]</code>, default:                   <code>None</code> )           \u2013            <p>The number of arguments parsed per occurrence.</p> </li> <li> <code>default_missing_value</code>               (<code>Optional[U]</code>, default:                   <code>None</code> )           \u2013            <p>The value for the argument when the flag is present but no value is specified.</p> </li> <li> <code>default_value</code>               (<code>Optional[U]</code>, default:                   <code>None</code> )           \u2013            <p>The value for the argument when not present.</p> </li> <li> <code>choices</code>               (<code>Optional[Sequence[str]]</code>, default:                   <code>None</code> )           \u2013            <p>A sequence of valid choices for the argument.</p> </li> <li> <code>required</code>               (<code>Optional[bool]</code>, default:                   <code>None</code> )           \u2013            <p>Whether the argument must be present.</p> </li> <li> <code>help</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>The description of the argument for short help (<code>-h</code>).</p> </li> <li> <code>long_help</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>The description of the argument for long help (<code>--help</code>).</p> </li> <li> <code>value_name</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>The placeholder for the argument's value in the help message / usage.</p> </li> <li> <code>deprecated</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether this argument is deprecated and should not be used.</p> </li> </ul> <p>Examples:</p> <pre><code>import clap\nfrom clap import ArgAction, ColorChoice, arg, long, short\n\n\n@clap.command\nclass Cli:\n    verbose: bool = arg(short, long)\n    include_hidden: bool = arg(short=\"H\", long=\"hidden\")\n    additional_patterns: list[str] = arg(long=\"and\", action=ArgAction.Append)\n    color: ColorChoice = arg(\n        long,\n        value_name=\"WHEN\",\n        default_value=ColorChoice.Auto,\n        default_missing_value=ColorChoice.Always,\n        num_args=\"?\",\n    )\n</code></pre> Source code in <code>clap/api.py</code> <pre><code>def arg[U](\n    short_or_long: Optional[AutoFlag] = None,\n    long_or_short: Optional[AutoFlag] = None,\n    /,\n    *,\n    short: Optional[Union[str, bool]] = None,\n    long: Optional[Union[str, bool]] = None,\n    aliases: Optional[Sequence[str]] = None,\n    group: Optional[Group] = None,\n    mutex: Optional[MutexGroup] = None,\n    action: Optional[Union[type, ArgAction]] = None,\n    num_args: Optional[NargsType] = None,\n    default_missing_value: Optional[U] = None,\n    default_value: Optional[U] = None,\n    choices: Optional[Sequence[str]] = None,\n    required: Optional[bool] = None,\n    help: Optional[str] = None,\n    long_help: Optional[str] = None,\n    value_name: Optional[str] = None,\n    deprecated: bool = False,\n) -&gt; Arg:\n    \"\"\"Create a command-line argument.\n\n    Args:\n        short_or_long: Use `clap.short` or `clap.long` to automatically create\n            the short or long version of the argument.\n        long_or_short: Use `clap.short` or `clap.long` to automatically create\n            the short or long version of the argument.\n        short: The short version of the argument without the preceding `-`. Specify\n            `True` to automatically create it.\n        long: The long version of the argument without the preceding `--`. Specify\n            `True` to automatically create it.\n        aliases: Additional flags for the argument.\n        group: The group to which the argument is added.\n        mutex: The mutually exclusive group to which the argument is added.\n        action: How to react to an argument when parsing it.\n        num_args: The number of arguments parsed per occurrence.\n        default_missing_value: The value for the argument when the flag is\n            present but no value is specified.\n        default_value: The value for the argument when not present.\n        choices: A sequence of valid choices for the argument.\n        required: Whether the argument must be present.\n        help: The description of the argument for short help (`-h`).\n        long_help: The description of the argument for long help (`--help`).\n        value_name: The placeholder for the argument's value in the help message / usage.\n        deprecated: Whether this argument is deprecated and should not be used.\n\n    Examples:\n\n    ```python\n    import clap\n    from clap import ArgAction, ColorChoice, arg, long, short\n\n\n    @clap.command\n    class Cli:\n        verbose: bool = arg(short, long)\n        include_hidden: bool = arg(short=\"H\", long=\"hidden\")\n        additional_patterns: list[str] = arg(long=\"and\", action=ArgAction.Append)\n        color: ColorChoice = arg(\n            long,\n            value_name=\"WHEN\",\n            default_value=ColorChoice.Auto,\n            default_missing_value=ColorChoice.Always,\n            num_args=\"?\",\n        )\n    ```\n    \"\"\"\n    short_name = None\n    long_name = None\n\n    match short_or_long:\n        case AutoFlag.Short: short_name = AutoFlag.Short\n        case AutoFlag.Long: long_name = AutoFlag.Long\n        case _: pass\n\n    match long_or_short:\n        case AutoFlag.Short: short_name = AutoFlag.Short\n        case AutoFlag.Long: long_name = AutoFlag.Long\n        case _: pass\n\n    if short is not None:\n        if isinstance(short, str):\n            if len(short) == 0:\n                raise ValueError\n            short_name = short\n        elif short is True:\n            short_name = AutoFlag.Short\n\n    if long is not None:\n        if isinstance(long, str):\n            if len(long) == 0:\n                raise ValueError\n            long_name = long\n        elif long is True:\n            long_name = AutoFlag.Long\n\n    return Arg(\n        short=short_name,\n        long=long_name,\n        help=help,\n        long_help=long_help,\n        value_name=value_name,\n        aliases=aliases or [],\n        group=group,\n        mutex=mutex,\n        action=action,\n        num_args=num_args,\n        default_missing_value=default_missing_value,\n        default_value=default_value,\n        choices=choices,\n        required=required,\n        deprecated=deprecated,\n    )\n</code></pre>"},{"location":"arg/#clap.short","title":"clap.short  <code>module-attribute</code>","text":"<pre><code>short = Short\n</code></pre> <p>Generate short from the first character in the case-converted field name.</p>"},{"location":"arg/#clap.long","title":"clap.long  <code>module-attribute</code>","text":"<pre><code>long = Long\n</code></pre> <p>Generate long from the case-converted field name.</p>"},{"location":"command/","title":"command","text":""},{"location":"command/#clap.command","title":"clap.command","text":"<pre><code>command(cls: type[T]) -&gt; type[T]\n</code></pre><pre><code>command(\n    *,\n    name: str = ...,\n    version: Optional[str] = None,\n    long_version: Optional[str] = None,\n    usage: Optional[str] = ...,\n    about: Optional[str] = ...,\n    long_about: Optional[str] = ...,\n    after_help: Optional[str] = None,\n    after_long_help: Optional[str] = ...,\n    before_help: Optional[str] = None,\n    before_long_help: Optional[str] = ...,\n    subcommand_help_heading: str = ...,\n    subcommand_value_name: str = ...,\n    color: ColorChoice = ...,\n    styles: Optional[Styles] = ...,\n    help_template: Optional[str] = ...,\n    max_term_width: Optional[int] = ...,\n    propagate_version: bool = False,\n    disable_version_flag: bool = False,\n    disable_help_flag: bool = False,\n    prefix_chars: str = \"-\",\n    fromfile_prefix_chars: Optional[str] = None,\n    conflict_handler: str = ...,\n    allow_abbrev: bool = True,\n    exit_on_error: bool = True,\n) -&gt; Callable[[type[T]], type[T]]\n</code></pre> <pre><code>command(\n    cls: Optional[type[T]] = None,\n    /,\n    *,\n    name: Optional[str] = None,\n    version: Optional[str] = None,\n    long_version: Optional[str] = None,\n    usage: Optional[str] = None,\n    author: Optional[str] = None,\n    about: Optional[str] = None,\n    long_about: Optional[str] = None,\n    before_help: Optional[str] = None,\n    before_long_help: Optional[str] = None,\n    after_help: Optional[str] = None,\n    after_long_help: Optional[str] = None,\n    subcommand_help_heading: str = \"Commands\",\n    subcommand_value_name: str = \"COMMAND\",\n    color: Optional[ColorChoice] = None,\n    styles: Optional[Styles] = None,\n    help_template: Optional[str] = None,\n    max_term_width: Optional[int] = None,\n    propagate_version: bool = False,\n    disable_version_flag: bool = False,\n    disable_help_flag: bool = False,\n    prefix_chars: str = \"-\",\n    fromfile_prefix_chars: Optional[str] = None,\n    conflict_handler: Optional[str] = None,\n    allow_abbrev: Optional[bool] = None,\n    exit_on_error: Optional[bool] = None,\n) -&gt; Union[type[T], Callable[[type[T]], type[T]]]\n</code></pre> <p>Configure a class to parse command-line arguments.</p> <p>Parameters:</p> <ul> <li> <code>cls</code>               (<code>Optional[type[T]]</code>, default:                   <code>None</code> )           \u2013            <p>The class to be decorated (when used without parentheses).</p> </li> <li> <code>name</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>Overrides the runtime-determined name of the program.</p> </li> <li> <code>version</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>Sets the version for the short version (<code>-V</code>) and help messages.</p> </li> <li> <code>long_version</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>Sets the version for the long version (<code>--version</code>) and help messages.</p> </li> <li> <code>usage</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>The string describing the program usage. The default is generated from arguments added to parser.</p> </li> <li> <code>author</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>Sets the author(s) for the help message. A custom <code>help_template</code> is needed for author to show up.</p> </li> <li> <code>about</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>The program's description for the short help (<code>-h</code>).</p> </li> <li> <code>long_about</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>The program's description for the long help (<code>--help</code>).</p> </li> <li> <code>after_help</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>Free-form help text for after auto-generated short help (<code>-h</code>).</p> </li> <li> <code>after_long_help</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>Free-form help text for after auto-generated long help (<code>--help</code>).</p> </li> <li> <code>before_help</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>Free-form help text for before auto-generated short help (<code>-h</code>).</p> </li> <li> <code>before_long_help</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>Free-form help text for before auto-generated long help (<code>--help</code>).</p> </li> <li> <code>subcommand_help_heading</code>               (<code>str</code>, default:                   <code>'Commands'</code> )           \u2013            <p>The help heading used for subcommands when printing help.</p> </li> <li> <code>subcommand_value_name</code>               (<code>str</code>, default:                   <code>'COMMAND'</code> )           \u2013            <p>The value name used for subcommands when printing usage and help.</p> </li> <li> <code>color</code>               (<code>Optional[ColorChoice]</code>, default:                   <code>None</code> )           \u2013            <p>When to color output.</p> </li> <li> <code>styles</code>               (<code>Optional[Styles]</code>, default:                   <code>None</code> )           \u2013            <p>The styles for help output.</p> </li> <li> <code>help_template</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>The help template to be used, overriding the default format.</p> </li> <li> <code>max_term_width</code>               (<code>Optional[int]</code>, default:                   <code>None</code> )           \u2013            <p>The help output will wrap to <code>min(max_term_width, shutil.get_terminal_size())</code>.</p> </li> <li> <code>propagate_version</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to use the version of the current command for all subcommands.</p> </li> <li> <code>disable_version_flag</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Disable the <code>-V</code> and <code>--version</code> flags.</p> </li> <li> <code>disable_help_flag</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Disable the <code>-h</code> and <code>--help</code> flags.</p> </li> <li> <code>prefix_chars</code>               (<code>str</code>, default:                   <code>'-'</code> )           \u2013            <p>The set of characters that prefix optional arguments.</p> </li> <li> <code>fromfile_prefix_chars</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>The set of characters that prefix files from which additional arguments should be read.</p> </li> <li> <code>conflict_handler</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>The strategy for resolving conflicting optionals.</p> </li> <li> <code>allow_abbrev</code>               (<code>Optional[bool]</code>, default:                   <code>None</code> )           \u2013            <p>Whether to allow long options to be abbreviated if the abbreviation is unambiguous.</p> </li> <li> <code>exit_on_error</code>               (<code>Optional[bool]</code>, default:                   <code>None</code> )           \u2013            <p>Whether <code>ArgumentParser</code> exits with error info when an error occurs.</p> </li> </ul> <p>Example:</p> <pre><code>import clap\n\n@clap.command(name=\"git\", version=\"2.49.0\")\nclass Cli(clap.Parser):\n    \"\"\"git - the stupid content tracker.\n\n    Git is a fast, scalable, distributed revision control system with an\n    unusually rich command set that provides both high-level operations and\n    full access to internals.\n    \"\"\"\n    ...\n</code></pre> Source code in <code>clap/api.py</code> <pre><code>@dataclass_transform()\ndef command[T](\n    cls: Optional[type[T]] = None,\n    /,\n    *,\n    name: Optional[str] = None,\n    version: Optional[str] = None,\n    long_version: Optional[str] = None,\n    usage: Optional[str] = None,\n    author: Optional[str] = None,\n    about: Optional[str] = None,\n    long_about: Optional[str] = None,\n    before_help: Optional[str] = None,\n    before_long_help: Optional[str] = None,\n    after_help: Optional[str] = None,\n    after_long_help: Optional[str] = None,\n    subcommand_help_heading: str = \"Commands\",\n    subcommand_value_name: str = \"COMMAND\",\n    color: Optional[ColorChoice] = None,\n    styles: Optional[Styles] = None,\n    help_template: Optional[str] = None,\n    max_term_width: Optional[int] = None,\n    propagate_version: bool = False,\n    disable_version_flag: bool = False,\n    disable_help_flag: bool = False,\n    prefix_chars: str = \"-\",\n    fromfile_prefix_chars: Optional[str] = None,\n    conflict_handler: Optional[str] = None,\n    allow_abbrev: Optional[bool] = None,\n    exit_on_error: Optional[bool] = None,\n) -&gt; Union[type[T], Callable[[type[T]], type[T]]]:\n    \"\"\"Configure a class to parse command-line arguments.\n\n    Args:\n        cls: The class to be decorated (when used without parentheses).\n        name: Overrides the runtime-determined name of the program.\n        version: Sets the version for the short version (`-V`) and help messages.\n        long_version: Sets the version for the long version (`--version`) and help messages.\n        usage: The string describing the program usage. The default is\n            generated from arguments added to parser.\n        author: Sets the author(s) for the help message. A custom `help_template` is needed for\n            author to show up.\n        about: The program's description for the short help (`-h`).\n        long_about: The program's description for the long help (`--help`).\n        after_help: Free-form help text for after auto-generated short help (`-h`).\n        after_long_help: Free-form help text for after auto-generated long help (`--help`).\n        before_help: Free-form help text for before auto-generated short help (`-h`).\n        before_long_help: Free-form help text for before auto-generated long help (`--help`).\n        subcommand_help_heading: The help heading used for subcommands when printing help.\n        subcommand_value_name: The value name used for subcommands when printing usage and help.\n        color: When to color output.\n        styles: The styles for help output.\n        help_template: The help template to be used, overriding the default format.\n        max_term_width: The help output will wrap to\n            `min(max_term_width, shutil.get_terminal_size())`.\n        propagate_version: Whether to use the version of the current command for all subcommands.\n        disable_version_flag: Disable the `-V` and `--version` flags.\n        disable_help_flag: Disable the `-h` and `--help` flags.\n        prefix_chars: The set of characters that prefix optional arguments.\n        fromfile_prefix_chars: The set of characters that prefix files from\n            which additional arguments should be read.\n        conflict_handler: The strategy for resolving conflicting optionals.\n        allow_abbrev: Whether to allow long options to be abbreviated if the\n            abbreviation is unambiguous.\n        exit_on_error: Whether `ArgumentParser` exits with error info when an error occurs.\n\n    Example:\n\n    ```python\n    import clap\n\n    @clap.command(name=\"git\", version=\"2.49.0\")\n    class Cli(clap.Parser):\n        \\\"\"\"git - the stupid content tracker.\n\n        Git is a fast, scalable, distributed revision control system with an\n        unusually rich command set that provides both high-level operations and\n        full access to internals.\n        \\\"\"\"\n        ...\n    ```\n    \"\"\"\n\n    def wrap(cls: type[T]) -&gt; type[T]:\n        nonlocal about, long_about, name\n        if cls.__doc__ is not None:\n            doc_about, doc_long_about = get_help_from_docstring(cls.__doc__.strip())\n            if about is None:\n                about = doc_about\n            if long_about is None:\n                long_about = doc_long_about\n        if name is None:\n            name = os.path.basename(sys.argv[0])\n        command = Command(\n            name=name,\n            usage=usage,\n            author=author,\n            version=version,\n            long_version=long_version,\n            about=about,\n            long_about=long_about,\n            before_help=before_help,\n            before_long_help=before_long_help,\n            after_help=after_help,\n            after_long_help=after_long_help,\n            subcommand_help_heading=subcommand_help_heading,\n            subcommand_value_name=subcommand_value_name,\n            color=color,\n            styles=styles,\n            help_template=help_template,\n            max_term_width=max_term_width,\n            propagate_version=propagate_version,\n            disable_version_flag=disable_version_flag,\n            disable_help_flag=disable_help_flag,\n            prefix_chars=prefix_chars,\n            fromfile_prefix_chars=fromfile_prefix_chars,\n            conflict_handler=conflict_handler,\n            allow_abbrev=allow_abbrev,\n            exit_on_error=exit_on_error,\n        )\n\n        setattr(cls, _COMMAND_DATA, command)\n        setattr(cls, _PARSER, create_parser(cls))\n\n        # delete default values of fields so that `dataclass` does not complain\n        # about mutable defaults (`Arg`)\n        for name in cls.__annotations__:\n            if hasattr(cls, name):\n                delattr(cls, name)\n\n        dataclass(cls, slots=True)\n\n        @classmethod\n        def parse(cls: type[T], args: Optional[list[str]] = None) -&gt; T:\n            \"\"\"Parse command-line arguments and return an instance of the class.\"\"\"\n            parser = getattr(cls, _PARSER)\n            parsed_args = parser.parse_args(args)\n            obj = object.__new__(cls)\n            apply_parsed_args(dict(parsed_args._get_kwargs()), obj)\n            return obj\n\n        cls.parse = parse\n        return cls\n\n    if cls is None:\n        return wrap\n    return wrap(cls)\n</code></pre>"},{"location":"core/","title":"Core","text":""},{"location":"core/#clap.core.Arg","title":"clap.core.Arg  <code>dataclass</code>","text":"<pre><code>Arg(\n    short: Optional[Union[AutoFlag, str]] = None,\n    long: Optional[Union[AutoFlag, str]] = None,\n    help: Optional[str] = None,\n    long_help: Optional[str] = None,\n    value_name: Optional[str] = None,\n    aliases: Sequence[str] = list(),\n    ty: Optional[Base] = None,\n    group: Optional[Group] = None,\n    mutex: Optional[MutexGroup] = None,\n    action: Optional[Union[ArgAction, type]] = None,\n    num_args: Optional[NargsType] = None,\n    default_missing_value: Optional[Any] = None,\n    default_value: Optional[Any] = None,\n    choices: Optional[Sequence[str]] = None,\n    choices_help: Optional[dict[str, str]] = None,\n    required: Optional[bool] = None,\n    deprecated: Optional[bool] = None,\n    dest: Optional[str] = None,\n)\n</code></pre> <p>Attributes:</p> <ul> <li> <code>aliases</code>               (<code>Sequence[str]</code>)           \u2013            <p>Flags in addition to <code>short</code> and <code>long</code>.</p> </li> <li> <code>group</code>               (<code>Optional[Group]</code>)           \u2013            <p>The group containing the argument.</p> </li> <li> <code>long</code>               (<code>Optional[Union[AutoFlag, str]]</code>)           \u2013            <p>The long flag.</p> </li> <li> <code>mutex</code>               (<code>Optional[MutexGroup]</code>)           \u2013            <p>The mutually exclusive group containing the argument.</p> </li> <li> <code>short</code>               (<code>Optional[Union[AutoFlag, str]]</code>)           \u2013            <p>The short flag.</p> </li> <li> <code>ty</code>               (<code>Optional[Base]</code>)           \u2013            <p>Stores type information for the argument.</p> </li> </ul>"},{"location":"core/#clap.core.Arg.aliases","title":"aliases  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>aliases: Sequence[str] = field(default_factory=list)\n</code></pre> <p>Flags in addition to <code>short</code> and <code>long</code>.</p>"},{"location":"core/#clap.core.Arg.group","title":"group  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>group: Optional[Group] = None\n</code></pre> <p>The group containing the argument.</p>"},{"location":"core/#clap.core.Arg.long","title":"long  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>long: Optional[Union[AutoFlag, str]] = None\n</code></pre> <p>The long flag.</p>"},{"location":"core/#clap.core.Arg.mutex","title":"mutex  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>mutex: Optional[MutexGroup] = None\n</code></pre> <p>The mutually exclusive group containing the argument.</p>"},{"location":"core/#clap.core.Arg.short","title":"short  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>short: Optional[Union[AutoFlag, str]] = None\n</code></pre> <p>The short flag.</p>"},{"location":"core/#clap.core.Arg.ty","title":"ty  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ty: Optional[Base] = None\n</code></pre> <p>Stores type information for the argument.</p>"},{"location":"core/#clap.core.Group","title":"clap.core.Group  <code>dataclass</code>","text":"<pre><code>Group(\n    title: str,\n    about: Optional[str] = None,\n    long_about: Optional[str] = None,\n    conflict_handler: Optional[str] = None,\n)\n</code></pre> <p>Family of related arguments.</p> <p>Example:</p> <pre><code>from pathlib import Path\n\nimport clap\nfrom clap import Group, arg\n\n@clap.command\nclass Cli(clap.Parser):\n    output_options = Group(\"Output Options\")\n    \"\"\"Configure output settings.\"\"\"\n    output_dir: Path = arg(long=\"output\", group=output_options, value_name=\"DIR\")\n    \"\"\"Path to output directory\"\"\"\n</code></pre> <p>Attributes:</p> <ul> <li> <code>about</code>               (<code>Optional[str]</code>)           \u2013            <p>The group's description for the short help (<code>-h</code>).</p> </li> <li> <code>conflict_handler</code>               (<code>Optional[str]</code>)           \u2013            <p>The strategy for resolving conflicting optionals within this group.</p> </li> <li> <code>long_about</code>               (<code>Optional[str]</code>)           \u2013            <p>The group's description for the long help (<code>--help</code>).</p> </li> <li> <code>title</code>               (<code>str</code>)           \u2013            <p>The title for the argument group in the help output.</p> </li> </ul>"},{"location":"core/#clap.core.Group.about","title":"about  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>about: Optional[str] = None\n</code></pre> <p>The group's description for the short help (<code>-h</code>).</p> <p>If <code>Group.long_about</code> is not specified, this message will be displayed for <code>--help</code>.</p>"},{"location":"core/#clap.core.Group.conflict_handler","title":"conflict_handler  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>conflict_handler: Optional[str] = None\n</code></pre> <p>The strategy for resolving conflicting optionals within this group.</p> <p>This is forwarded to argparse.</p>"},{"location":"core/#clap.core.Group.long_about","title":"long_about  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>long_about: Optional[str] = None\n</code></pre> <p>The group's description for the long help (<code>--help</code>).</p> <p>If not set, <code>Group.about</code> will be used for long help in addition to short help (<code>-h</code>).</p>"},{"location":"core/#clap.core.Group.title","title":"title  <code>instance-attribute</code>","text":"<pre><code>title: str\n</code></pre> <p>The title for the argument group in the help output.</p>"},{"location":"core/#clap.core.MutexGroup","title":"clap.core.MutexGroup  <code>dataclass</code>","text":"<pre><code>MutexGroup(\n    parent: Optional[Group] = None, required: bool = False\n)\n</code></pre> <p>Create a mutually exclusive group of arguments.</p> <p>It will be ensured that only one of the arguments in the mutually exclusive group is present on the command line. This is useful for options that conflict with each other, such as <code>--verbose</code> and <code>--quiet</code>.</p> <p>Example:</p> <pre><code>import clap\nfrom clap import MutexGroup\n\n@clap.command\nclass Cli(clap.Parser):\n    loglevel = MutexGroup()\n    verbose: bool = arg(long, mutex=loglevel)\n    quiet: bool = arg(long, mutex=loglevel)\n</code></pre> <p>Attributes:</p> <ul> <li> <code>parent</code>               (<code>Optional[Group]</code>)           \u2013            <p>The parent argument group to add this mutually exclusive group to.</p> </li> <li> <code>required</code>               (<code>bool</code>)           \u2013            <p>Whether at least one of the mutually exclusive arguments must be present.</p> </li> </ul>"},{"location":"core/#clap.core.MutexGroup.parent","title":"parent  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>parent: Optional[Group] = None\n</code></pre> <p>The parent argument group to add this mutually exclusive group to.</p> <p>If <code>None</code>, the group will be added directly to the parser.</p>"},{"location":"core/#clap.core.MutexGroup.required","title":"required  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>required: bool = False\n</code></pre> <p>Whether at least one of the mutually exclusive arguments must be present.</p>"},{"location":"core/#clap.core.AutoFlag","title":"clap.core.AutoFlag","text":"<p>               Bases: <code>Enum</code></p> <p>Attributes:</p> <ul> <li> <code>Long</code>           \u2013            <p>Generate long from the case-converted field name.</p> </li> <li> <code>Short</code>           \u2013            <p>Generate short from the first character in the case-converted field name.</p> </li> </ul>"},{"location":"core/#clap.core.AutoFlag.Long","title":"Long  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Long = auto()\n</code></pre> <p>Generate long from the case-converted field name.</p> <p>Alias: <code>long</code>.</p>"},{"location":"core/#clap.core.AutoFlag.Short","title":"Short  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Short = auto()\n</code></pre> <p>Generate short from the first character in the case-converted field name.</p> <p>Alias: <code>short</code>.</p>"},{"location":"core/#clap.core.Command","title":"clap.core.Command  <code>dataclass</code>","text":"<pre><code>Command(\n    name: str,\n    aliases: Sequence[str] = list(),\n    usage: Optional[str] = None,\n    author: Optional[str] = None,\n    version: Optional[str] = None,\n    long_version: Optional[str] = None,\n    about: Optional[str] = None,\n    long_about: Optional[str] = None,\n    before_help: Optional[str] = None,\n    before_long_help: Optional[str] = None,\n    after_help: Optional[str] = None,\n    after_long_help: Optional[str] = None,\n    subcommand_help_heading: str = \"Commands\",\n    subcommand_value_name: str = \"COMMAND\",\n    color: Optional[ColorChoice] = None,\n    styles: Optional[Styles] = None,\n    help_template: Optional[str] = None,\n    max_term_width: Optional[int] = None,\n    propagate_version: bool = False,\n    disable_version_flag: bool = False,\n    disable_help_flag: bool = False,\n    prefix_chars: str = \"-\",\n    fromfile_prefix_chars: Optional[str] = None,\n    conflict_handler: Optional[str] = None,\n    allow_abbrev: Optional[bool] = None,\n    exit_on_error: Optional[bool] = None,\n    deprecated: Optional[bool] = None,\n    args: dict[str, Arg] = dict(),\n    groups: dict[Group, list[Arg]] = dict(),\n    mutexes: defaultdict[MutexGroup, list[Arg]] = (\n        lambda: defaultdict(list)\n    )(),\n    subcommand_class: Optional[type] = None,\n    subcommands: dict[str, Self] = dict(),\n    subcommand_dest: Optional[str] = None,\n    subparser_dest: Optional[str] = None,\n    subcommand_required: bool = False,\n)\n</code></pre> <p>Attributes:</p> <ul> <li> <code>subcommand_class</code>               (<code>Optional[type]</code>)           \u2013            <p>Contains the class if it is a subcommand.</p> </li> </ul>"},{"location":"core/#clap.core.Command.subcommand_class","title":"subcommand_class  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>subcommand_class: Optional[type] = None\n</code></pre> <p>Contains the class if it is a subcommand.</p>"},{"location":"group/","title":"Group","text":""},{"location":"group/#clap.Group","title":"clap.Group  <code>dataclass</code>","text":"<pre><code>Group(\n    title: str,\n    about: Optional[str] = None,\n    long_about: Optional[str] = None,\n    conflict_handler: Optional[str] = None,\n)\n</code></pre> <p>Family of related arguments.</p> <p>Example:</p> <pre><code>from pathlib import Path\n\nimport clap\nfrom clap import Group, arg\n\n@clap.command\nclass Cli(clap.Parser):\n    output_options = Group(\"Output Options\")\n    \"\"\"Configure output settings.\"\"\"\n    output_dir: Path = arg(long=\"output\", group=output_options, value_name=\"DIR\")\n    \"\"\"Path to output directory\"\"\"\n</code></pre> <p>Attributes:</p> <ul> <li> <code>about</code>               (<code>Optional[str]</code>)           \u2013            <p>The group's description for the short help (<code>-h</code>).</p> </li> <li> <code>conflict_handler</code>               (<code>Optional[str]</code>)           \u2013            <p>The strategy for resolving conflicting optionals within this group.</p> </li> <li> <code>long_about</code>               (<code>Optional[str]</code>)           \u2013            <p>The group's description for the long help (<code>--help</code>).</p> </li> <li> <code>title</code>               (<code>str</code>)           \u2013            <p>The title for the argument group in the help output.</p> </li> </ul>"},{"location":"group/#clap.Group.about","title":"about  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>about: Optional[str] = None\n</code></pre> <p>The group's description for the short help (<code>-h</code>).</p> <p>If <code>Group.long_about</code> is not specified, this message will be displayed for <code>--help</code>.</p>"},{"location":"group/#clap.Group.conflict_handler","title":"conflict_handler  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>conflict_handler: Optional[str] = None\n</code></pre> <p>The strategy for resolving conflicting optionals within this group.</p> <p>This is forwarded to argparse.</p>"},{"location":"group/#clap.Group.long_about","title":"long_about  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>long_about: Optional[str] = None\n</code></pre> <p>The group's description for the long help (<code>--help</code>).</p> <p>If not set, <code>Group.about</code> will be used for long help in addition to short help (<code>-h</code>).</p>"},{"location":"group/#clap.Group.title","title":"title  <code>instance-attribute</code>","text":"<pre><code>title: str\n</code></pre> <p>The title for the argument group in the help output.</p>"},{"location":"help/","title":"Help Template","text":""},{"location":"help/#clap.help.HelpTemplate","title":"clap.help.HelpTemplate  <code>module-attribute</code>","text":"<pre><code>HelpTemplate = str\n</code></pre> <p>Tags are given inside curly brackets.</p> <p>Valid tags are:</p> <ul> <li><code>{name}</code>                - Display name for the (sub-)command.</li> <li><code>{version}</code>             - Version number.</li> <li><code>{author}</code>              - Author information.</li> <li><code>{author-with-newline}</code> - Author followed by <code>\\n</code>.</li> <li><code>{author-section}</code>      - Author preceded and followed by <code>\\n</code>.</li> <li><code>{about}</code>               - General description (from <code>about</code> or <code>long_about</code>).</li> <li><code>{about-with-newline}</code>  - About followed by <code>\\n</code>.</li> <li><code>{about-section}</code>       - About preceded and followed by <code>\\n</code>.</li> <li><code>{usage-heading}</code>       - Automatically generated usage heading.</li> <li><code>{usage}</code>               - Automatically generated or given usage string.</li> <li><code>{all-args}</code>            - Help for all arguments (options, flags, positional                             arguments, and subcommands) including titles.</li> <li><code>{options}</code>             - Help for options.</li> <li><code>{positionals}</code>         - Help for positional arguments.</li> <li><code>{subcommands}</code>         - Help for subcommands.</li> <li><code>{tab}</code>                 - Standard tab size used within clap.</li> <li><code>{after-help}</code>          - Help from <code>after_help</code> or <code>after_long_help</code>.</li> <li><code>{before-help}</code>         - Help from <code>before_help</code> or <code>before_long_help</code>.</li> </ul> <p><code>DEFAULT_TEMPLATE</code> is the default help template.</p>"},{"location":"help/#clap.help.DEFAULT_TEMPLATE","title":"clap.help.DEFAULT_TEMPLATE  <code>module-attribute</code>","text":"<pre><code>DEFAULT_TEMPLATE: HelpTemplate = \"{before-help}{about-with-newline}\\n{usage-heading} {usage}\\n\\n{all-args}{after-help}\"\n</code></pre> <p>This is the default help template.</p>"},{"location":"mutex_group/","title":"MutexGroup","text":""},{"location":"mutex_group/#clap.MutexGroup","title":"clap.MutexGroup  <code>dataclass</code>","text":"<pre><code>MutexGroup(\n    parent: Optional[Group] = None, required: bool = False\n)\n</code></pre> <p>Create a mutually exclusive group of arguments.</p> <p>It will be ensured that only one of the arguments in the mutually exclusive group is present on the command line. This is useful for options that conflict with each other, such as <code>--verbose</code> and <code>--quiet</code>.</p> <p>Example:</p> <pre><code>import clap\nfrom clap import MutexGroup\n\n@clap.command\nclass Cli(clap.Parser):\n    loglevel = MutexGroup()\n    verbose: bool = arg(long, mutex=loglevel)\n    quiet: bool = arg(long, mutex=loglevel)\n</code></pre> <p>Attributes:</p> <ul> <li> <code>parent</code>               (<code>Optional[Group]</code>)           \u2013            <p>The parent argument group to add this mutually exclusive group to.</p> </li> <li> <code>required</code>               (<code>bool</code>)           \u2013            <p>Whether at least one of the mutually exclusive arguments must be present.</p> </li> </ul>"},{"location":"mutex_group/#clap.MutexGroup.parent","title":"parent  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>parent: Optional[Group] = None\n</code></pre> <p>The parent argument group to add this mutually exclusive group to.</p> <p>If <code>None</code>, the group will be added directly to the parser.</p>"},{"location":"mutex_group/#clap.MutexGroup.required","title":"required  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>required: bool = False\n</code></pre> <p>Whether at least one of the mutually exclusive arguments must be present.</p>"},{"location":"parser/","title":"Parser","text":""},{"location":"parser/#clap.Parser","title":"clap.Parser","text":"<p>A base class for static type checking.</p> <p>Classes decorated with <code>@clap.command</code> will have a <code>parse</code> method injected at runtime. Inheriting from <code>Parser</code> provides this method signature to static type checkers, avoiding errors and enabling autocompletion in editors.</p> <p>This class is not strictly required for functionality.</p> <p>Example:</p> <pre><code>import clap\n\n\n@clap.command\nclass Cli(clap.Parser): ...\n\n\nargs = Cli.parse()\n</code></pre> <p>Methods:</p> <ul> <li> <code>parse</code>             \u2013              <p>Parse from the provided <code>args</code> or <code>sys.argv</code>, exit on error.</p> </li> </ul>"},{"location":"parser/#clap.Parser.parse","title":"parse  <code>abstractmethod</code> <code>classmethod</code>","text":"<pre><code>parse(args: Optional[Sequence[str]] = None) -&gt; Self\n</code></pre> <p>Parse from the provided <code>args</code> or <code>sys.argv</code>, exit on error.</p> Source code in <code>clap/api.py</code> <pre><code>@classmethod\n@abstractmethod\ndef parse(cls: type[Self], args: Optional[Sequence[str]] = None) -&gt; Self:\n    \"\"\"Parse from the provided `args` or [`sys.argv`][], exit on error.\"\"\"\n</code></pre>"},{"location":"quickstart/","title":"Quickstart Guide","text":"<p>This guide is structured as a tutorial that will walk you through creating command-line applications with clap-py.</p> <p>It was adapted from the excellent tutorial for clap-rs using Claude 4.0 Sonnet in Cursor (and some manual cleaning by hand). Most text is lifted verbatim.</p>"},{"location":"quickstart/#quick-start","title":"Quick Start","text":"<p>You can create an application declaratively with a class and some decorators.</p> <p>Here is a preview of the type of application you can make:</p> <pre><code>from pathlib import Path\nfrom typing import Optional\n\nimport clap\nfrom clap import ArgAction, arg, long, short\n\n\n@clap.subcommand\nclass Test:\n    \"\"\"Does testing things.\"\"\"\n\n    list_flag: bool = arg(short, long=\"list\")\n    \"\"\"Lists test values.\"\"\"\n\n\n@clap.command(version=\"1.0\")\nclass Cli(clap.Parser):\n    \"\"\"A simple to use, efficient, and full-featured Command Line Argument Parser.\"\"\"\n\n    command: Optional[Test]\n\n    name: Optional[str]\n    \"\"\"Optional name to operate on.\"\"\"\n    config: Optional[Path] = arg(short, long, value_name=\"FILE\")\n    \"\"\"Sets a custom config file.\"\"\"\n    debug: int = arg(short, long, action=ArgAction.Count)\n    \"\"\"Turn debugging information on.\"\"\"\n\n\ndef main():\n    cli = Cli.parse()\n\n    # You can check the value provided by positional arguments, or option arguments\n    if cli.name:\n        print(f\"Value for name: {cli.name}\")\n\n    if cli.config:\n        print(f\"Value for config: {cli.config}\")\n\n    # You can see how many times a particular flag or argument occurred\n    # Note, only flags can have multiple occurrences\n    match cli.debug:\n        case 0:\n            print(\"Debug mode is off\")\n        case 1:\n            print(\"Debug mode is kind of on\")\n        case 2:\n            print(\"Debug mode is on\")\n        case _:\n            print(\"Don't be crazy\")\n\n    # You can check for the existence of subcommands, and if found use their\n    # matches just as you would the top level cmd\n    match cli.command:\n        case Test(list_flag):\n            if list_flag:\n                print(\"Printing testing lists...\")\n            else:\n                print(\"Not printing testing lists...\")\n        case None: ...\n\n    # Continued program logic goes here...\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>adityasz@github:clap-py$ python docs/docs/quickstart/01_quick.py --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 01_quick.py [OPTIONS] [NAME] [COMMAND]\n\nCommands:\n  test  Does testing things\n\nArguments:\n  [NAME]  Optional name to operate on\n\nOptions:\n  -c, --config &lt;FILE&gt;  Sets a custom config file\n  -d, --debug...       Turn debugging information on [default: 0]\n  -h, --help           Print help\n  -V, --version        Print version</code></pre> <p>By default, the program does nothing:</p> <pre><code>adityasz@github:clap-py$ python docs/docs/quickstart/01_quick.py\nDebug mode is off</code></pre> <p>But you can mix and match the various features:</p> <pre><code>adityasz@github:clap-py$ python docs/docs/quickstart/01_quick.py -dd test\nDebug mode is on\nNot printing testing lists...</code></pre> <p>See also:</p> <ul> <li>The tests for more   usage examples.</li> <li>The examples for   more application-focused examples.</li> </ul>"},{"location":"quickstart/#configuring-the-parser","title":"Configuring the Parser","text":"<p>You use the <code>@clap.command</code> decorator to start building a parser.</p> <pre><code>import clap\nfrom clap import arg, long\n\n\n@clap.command(name=\"MyApp\", version=\"1.0\")\nclass Cli(clap.Parser):\n    \"\"\"Does awesome things.\"\"\"\n\n    two: str = arg(long)\n    one: str = arg(long)\n\n\ndef main():\n    cli = Cli.parse()\n\n    print(f\"two: {cli.two}\")\n    print(f\"one: {cli.one}\")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>adityasz@github:clap-py$ python docs/docs/quickstart/02_apps.py --help\nDoes awesome things\n\nUsage: MyApp --two &lt;TWO&gt; --one &lt;ONE&gt;\n\nOptions:\n      --two &lt;TWO&gt;\n      --one &lt;ONE&gt;\n  -h, --help       Print help\n  -V, --version    Print version</code></pre> <pre><code>adityasz@github:clap-py$ python docs/docs/quickstart/02_apps.py --version\nMyApp 1.0</code></pre>"},{"location":"quickstart/#adding-arguments","title":"Adding Arguments","text":"<ol> <li>Positionals</li> <li>Options</li> <li>Flags</li> <li>Optional</li> <li>Defaults</li> <li>Subcommands</li> </ol> <p>Arguments are inferred from the fields of your class.</p>"},{"location":"quickstart/#positionals","title":"Positionals","text":"<p>By default, class fields define positional arguments:</p> <pre><code>import clap\n\n\n@clap.command(version=\"1.0\")\nclass Cli(clap.Parser):\n    name: str\n\n\ndef main():\n    cli = Cli.parse()\n    print(f\"name: {cli.name}\")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>adityasz@github:clap-py$ python docs/docs/quickstart/03_03_positional.py --help\nUsage: 03_03_positional.py &lt;NAME&gt;\n\nArguments:\n  &lt;NAME&gt;\n\nOptions:\n  -h, --help     Print help\n  -V, --version  Print version</code></pre> <pre><code>adityasz@github:clap-py$ python docs/docs/quickstart/03_03_positional.py bob\nname: bob</code></pre> <p>Note that the default <code>ArgAction</code> is <code>Set</code>. To accept multiple values, use a <code>list</code> type:</p> <pre><code>import clap\n\n\n@clap.command(version=\"1.0\")\nclass Cli(clap.Parser):\n    name: list[str]\n\n\ndef main():\n    cli = Cli.parse()\n    print(f\"name: {cli.name}\")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>adityasz@github:clap-py$ python docs/docs/quickstart/03_03_positional_mult.py --help\nUsage: 03_03_positional_mult.py [&lt;NAME&gt;...]\n\nArguments:\n  [&lt;NAME&gt;...]\n\nOptions:\n  -h, --help     Print help\n  -V, --version  Print version</code></pre> <pre><code>adityasz@github:clap-py$ python docs/docs/quickstart/03_03_positional_mult.py\nname: []</code></pre> <pre><code>adityasz@github:clap-py$ python docs/docs/quickstart/03_03_positional_mult.py bob\nname: ['bob']</code></pre> <pre><code>adityasz@github:clap-py$ python docs/docs/quickstart/03_03_positional_mult.py bob john\nname: ['bob', 'john']</code></pre>"},{"location":"quickstart/#options","title":"Options","text":"<p>You can name your arguments with a flag:</p> <ul> <li>Intent of the value is clearer</li> <li>Order doesn't matter</li> </ul> <p>To specify the flags for an argument, you can use <code>arg()</code> on a field:</p> <ul> <li>To automatically generate flags, <code>short</code> and   <code>long</code> can be used: <code>arg(short, long)</code>.<ul> <li><code>arg(short=True, long=True)</code> can also be used.</li> </ul> </li> <li>To specify the flags manually:<ul> <li><code>arg(short=\"n\", long=\"name\")</code>.</li> </ul> </li> </ul> <p>Note</p> <p><code>arg()</code> takes up to two positional-only paramters of type <code>AutoFlag</code>, and <code>short</code> and <code>long</code> are aliases for <code>AutoFlag.Short</code> and <code>AutoFlag.Long</code>. These are used to automatically generate flags.</p> <p>It also takes keyword-only arguments named <code>short</code> and <code>long</code>. These are used for manually specifying the flags.</p> <pre><code>import clap\nfrom clap import arg, long, short\n\n\n@clap.command(version=\"1.0\")\nclass Cli(clap.Parser):\n    name: str = arg(short, long)\n\n\ndef main():\n    cli = Cli.parse()\n    print(f\"name: {cli.name}\")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>adityasz@github:clap-py$ python docs/docs/quickstart/03_02_option.py --help\nUsage: 03_02_option.py --name &lt;NAME&gt;\n\nOptions:\n  -n, --name &lt;NAME&gt;\n  -h, --help         Print help\n  -V, --version      Print version</code></pre> <pre><code>adityasz@github:clap-py$ python docs/docs/quickstart/03_02_option.py --name bob\nname: bob</code></pre> <pre><code>adityasz@github:clap-py$ python docs/docs/quickstart/03_02_option.py --name=bob\nname: bob</code></pre> <pre><code>adityasz@github:clap-py$ python docs/docs/quickstart/03_02_option.py -n bob\nname: bob</code></pre> <pre><code>adityasz@github:clap-py$ python docs/docs/quickstart/03_02_option.py -n=bob\nname: bob</code></pre> <pre><code>adityasz@github:clap-py$ python docs/docs/quickstart/03_02_option.py -nbob\nname: bob</code></pre> <p>Note that the default <code>ArgAction</code> is <code>Set</code>. To accept multiple occurrences, override the action with <code>Append</code> via <code>list</code>:</p> <pre><code>import clap\nfrom clap import arg, long, short\n\n\n@clap.command(version=\"1.0\")\nclass Cli(clap.Parser):\n    name: list[str] = arg(short, long)\n\n\ndef main():\n    cli = Cli.parse()\n    print(f\"name: {cli.name}\")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>adityasz@github:clap-py$ python docs/docs/quickstart/03_02_option_mult.py --help\nUsage: 03_02_option_mult.py [OPTIONS]\n\nOptions:\n  -n, --name &lt;NAME&gt;  [default: []]\n  -h, --help         Print help\n  -V, --version      Print version</code></pre> <pre><code>adityasz@github:clap-py$ python docs/docs/quickstart/03_02_option_mult.py\nname: []</code></pre> <pre><code>adityasz@github:clap-py$ python docs/docs/quickstart/03_02_option_mult.py --name bob\nname: ['bob']</code></pre> <pre><code>adityasz@github:clap-py$ python docs/docs/quickstart/03_02_option_mult.py --name bob --name john\nname: ['bob', 'john']</code></pre> <pre><code>adityasz@github:clap-py$ python docs/docs/quickstart/03_02_option_mult.py --name bob --name=john -n tom -n=chris -nsteve\nname: ['bob', 'john', 'tom', 'chris', 'steve']</code></pre>"},{"location":"quickstart/#flags","title":"Flags","text":"<p>Flags can also be switches that can be on/off:</p> <pre><code>import clap\nfrom clap import arg, long, short\n\n\n@clap.command(version=\"1.0\")\nclass Cli(clap.Parser):\n    verbose: bool = arg(short, long)\n\n\ndef main():\n    cli = Cli.parse()\n    print(f\"verbose: {cli.verbose}\")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>adityasz@github:clap-py$ python docs/docs/quickstart/03_01_flag_bool.py --help\nUsage: 03_01_flag_bool.py [OPTIONS]\n\nOptions:\n  -v, --verbose\n  -h, --help     Print help\n  -V, --version  Print version</code></pre> <pre><code>adityasz@github:clap-py$ python docs/docs/quickstart/03_01_flag_bool.py\nverbose: False</code></pre> <pre><code>adityasz@github:clap-py$ python docs/docs/quickstart/03_01_flag_bool.py --verbose\nverbose: True</code></pre> <p>Note that the default <code>ArgAction</code> for a <code>bool</code> field is <code>SetTrue</code>. To accept multiple flags, override the action with <code>Count</code>:</p> <pre><code>import clap\nfrom clap import ArgAction, arg, long, short\n\n\n@clap.command(version=\"1.0\")\nclass Cli(clap.Parser):\n    verbose: int = arg(short, long, action=ArgAction.Count)\n\n\ndef main():\n    cli = Cli.parse()\n    print(f\"verbose: {cli.verbose}\")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>adityasz@github:clap-py$ python docs/docs/quickstart/03_01_flag_count.py --help\nUsage: 03_01_flag_count.py [OPTIONS]\n\nOptions:\n  -v, --verbose...  [default: 0]\n  -h, --help        Print help\n  -V, --version     Print version</code></pre> <pre><code>adityasz@github:clap-py$ python docs/docs/quickstart/03_01_flag_count.py\nverbose: 0</code></pre> <pre><code>adityasz@github:clap-py$ python docs/docs/quickstart/03_01_flag_count.py --verbose\nverbose: 1</code></pre> <pre><code>adityasz@github:clap-py$ python docs/docs/quickstart/03_01_flag_count.py --verbose --verbose\nverbose: 2</code></pre>"},{"location":"quickstart/#optional","title":"Optional","text":"<p>By default, arguments are assumed to be required. To make an argument optional, wrap the field's type in <code>Optional</code>:</p> <pre><code>from typing import Optional\n\nimport clap\n\n\n@clap.command(version=\"1.0\")\nclass Cli(clap.Parser):\n    name: Optional[str]\n\n\ndef main():\n    cli = Cli.parse()\n    print(f\"name: {cli.name}\")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>adityasz@github:clap-py$ python docs/docs/quickstart/03_06_optional.py --help\nUsage: 03_06_optional.py [NAME]\n\nArguments:\n  [NAME]\n\nOptions:\n  -h, --help     Print help\n  -V, --version  Print version</code></pre> <pre><code>adityasz@github:clap-py$ python docs/docs/quickstart/03_06_optional.py\nname: None</code></pre> <pre><code>adityasz@github:clap-py$ python docs/docs/quickstart/03_06_optional.py bob\nname: bob</code></pre>"},{"location":"quickstart/#defaults","title":"Defaults","text":"<p>We've previously showed that arguments can be required or optional. When optional, you work with an <code>Optional</code> and can use <code>or</code> or provide a default value. Alternatively, you can set <code>default_value</code>.</p> <pre><code>import clap\nfrom clap import arg\n\n\n@clap.command(version=\"1.0\")\nclass Cli(clap.Parser):\n    port: int = arg(default_value=2020)\n\n\ndef main():\n    cli = Cli.parse()\n    print(f\"port: {cli.port}\")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>adityasz@github:clap-py$ python docs/docs/quickstart/03_05_default_values.py --help\nUsage: 03_05_default_values.py [PORT]\n\nArguments:\n  [PORT]  [default: 2020]\n\nOptions:\n  -h, --help     Print help\n  -V, --version  Print version</code></pre> <pre><code>adityasz@github:clap-py$ python docs/docs/quickstart/03_05_default_values.py\nport: 2020</code></pre> <pre><code>adityasz@github:clap-py$ python docs/docs/quickstart/03_05_default_values.py 22\nport: 22</code></pre>"},{"location":"quickstart/#subcommands","title":"Subcommands","text":"<p>Subcommands are created with <code>@clap.subcommand</code> and added via a type annotation to a field that will contain the parsed result. If there are multiple subcommands, use <code>Union</code>. Each instance of a subcommand can have its own version, author(s), arguments, and even its own subcommands.</p> <pre><code>from typing import Optional\n\nimport clap\n\n\n@clap.subcommand\nclass Add:\n    \"\"\"Adds files to myapp.\"\"\"\n\n    name: Optional[str]\n\n\n@clap.command(version=\"1.0\", propagate_version=True)\nclass Cli(clap.Parser):\n    command: Add\n\n\ndef main():\n    cli = Cli.parse()\n\n    # You can check for the existence of subcommands, and if found use their\n    # matches just as you would the top level cmd\n    match cli.command:\n        case Add(name):\n            print(f\"'myapp add' was used, name is: {name}\")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>adityasz@github:clap-py$ python docs/docs/quickstart/03_04_subcommands.py --help\nUsage: 03_04_subcommands.py &lt;COMMAND&gt;\n\nCommands:\n  add  Adds files to myapp\n\nOptions:\n  -h, --help     Print help\n  -V, --version  Print version</code></pre> <pre><code>adityasz@github:clap-py$ python docs/docs/quickstart/03_04_subcommands.py add --help\nAdds files to myapp\n\nUsage: 03_04_subcommands.py add [NAME]\n\nArguments:\n  [NAME]\n\nOptions:\n  -h, --help     Print help\n  -V, --version  Print version</code></pre> <pre><code>adityasz@github:clap-py$ python docs/docs/quickstart/03_04_subcommands.py add bob\n'myapp add' was used, name is: bob</code></pre> <p>To make a subcommand optional, wrap it in an <code>Optional</code> (e.g. <code>command: Optional[Add]</code>).</p> <p>Since we specified <code>propagate_version=True</code>, the <code>--version</code> flag is available in all subcommands:</p> <pre><code>adityasz@github:clap-py$ python docs/docs/quickstart/03_04_subcommands.py --version\n03_04_subcommands.py 1.0</code></pre> <pre><code>adityasz@github:clap-py$ python docs/docs/quickstart/03_04_subcommands.py add --version\nadd 1.0</code></pre>"},{"location":"quickstart/#validation","title":"Validation","text":"<ol> <li>Enumerated values</li> <li>Argument Relations</li> <li>Custom Validation</li> </ol> <p>An appropriate default parser/validator will be selected for the field's type.</p>"},{"location":"quickstart/#enumerated-values","title":"Enumerated values","text":"<p>For arguments with specific values you want to test for, you can use Python's <code>Enum</code>. This allows you to specify the valid values for that argument. If the user does not use one of those specific values, they will receive a graceful exit with error message informing them of the mistake, and what the possible valid values are.</p> <pre><code>from enum import Enum, auto\n\nimport clap\n\n\nclass Mode(Enum):\n    \"\"\"TODO: Help strings are not yet printed for enum values in the long help output.\n\n    See TODOs in README.md.\n    \"\"\"\n\n    Fast = auto()\n    \"\"\"Run swiftly.\"\"\"\n    Slow = auto()\n    \"\"\"Crawl slowly but steadily.\n\n    This paragraph is ignored because there is no long help text for possible values.\n    \"\"\"\n\n\n@clap.command(version=\"1.0\")\nclass Cli(clap.Parser):\n    mode: Mode\n    \"\"\"What mode to run the program in.\"\"\"\n\n\ndef main():\n    cli = Cli.parse()\n\n    match cli.mode:\n        case Mode.Fast:\n            print(\"Hare\")\n        case Mode.Slow:\n            print(\"Tortoise\")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>adityasz@github:clap-py$ python docs/docs/quickstart/04_01_enum.py --help\nUsage: 04_01_enum.py &lt;MODE&gt;\n\nArguments:\n  &lt;MODE&gt;\n          What mode to run the program in\n\n          Possible values:\n          - fast: Run swiftly\n          - slow: Crawl slowly but steadily\n\nOptions:\n  -h, --help     Print help\n  -V, --version  Print version</code></pre> <pre><code>adityasz@github:clap-py$ python docs/docs/quickstart/04_01_enum.py -h\nUsage: 04_01_enum.py &lt;MODE&gt;\n\nArguments:\n  &lt;MODE&gt;  What mode to run the program in [possible values: fast, slow]\n\nOptions:\n  -h, --help     Print help\n  -V, --version  Print version</code></pre> <pre><code>adityasz@github:clap-py$ python docs/docs/quickstart/04_01_enum.py fast\nHare</code></pre> <pre><code>adityasz@github:clap-py$ python docs/docs/quickstart/04_01_enum.py slow\nTortoise</code></pre>"},{"location":"quickstart/#argument-relations","title":"Argument Relations","text":"<p>Note</p> <p>Advanced argument relations and dependencies like <code>requires</code> and <code>conflicts_with</code> are not yet implemented in clap-py. You can use <code>Group</code> and <code>MutexGroup</code> for basic grouping and mutual exclusion.</p>"},{"location":"quickstart/#custom-validation","title":"Custom Validation","text":"<p>As a last resort, you can create custom validation logic in your application after parsing:</p> <pre><code>import sys\nfrom typing import Optional\n\nimport clap\nfrom clap import arg, long, short\n\n\n@clap.command(version=\"1.0\")\nclass Cli(clap.Parser):\n    input_file: Optional[str]\n    \"\"\"Some regular input.\"\"\"\n\n    set_ver: Optional[str] = arg(long, value_name=\"VER\")\n    \"\"\"Set version manually.\"\"\"\n\n    major: bool = arg(long)\n    \"\"\"Auto inc major.\"\"\"\n\n    minor: bool = arg(long)\n    \"\"\"Auto inc minor.\"\"\"\n\n    patch: bool = arg(long)\n    \"\"\"Auto inc patch.\"\"\"\n\n    spec_in: Optional[str] = arg(long)\n    \"\"\"Some special input argument.\"\"\"\n\n    config: Optional[str] = arg(short)\n\n\ndef main():\n    cli = Cli.parse()\n\n    # Let's assume the old version 1.2.3\n    major = 1\n    minor = 2\n    patch = 3\n\n    # See if --set-ver was used to set the version manually\n    if cli.set_ver is not None:\n        if cli.major or cli.minor or cli.patch:\n            print(\"error: Can't do relative and absolute version change\", file=sys.stderr)\n            sys.exit(1)\n        version = cli.set_ver\n    else:\n        # Increment the one requested (in a real program, we'd reset the lower numbers)\n        flags_set = [cli.major, cli.minor, cli.patch]\n        if sum(flags_set) != 1:\n            print(\"error: Can only modify one version field\", file=sys.stderr)\n            sys.exit(1)\n\n        if cli.major:\n            major += 1\n        elif cli.minor:\n            minor += 1\n        elif cli.patch:\n            patch += 1\n        else:\n            print(\n                \"error: Must specify one of --set-ver, --major, --minor, or --patch\",\n                file=sys.stderr,\n            )\n            sys.exit(1)\n\n        version = f\"{major}.{minor}.{patch}\"\n\n    print(f\"Version: {version}\")\n\n    # Check for usage of -c\n    if cli.config is not None:\n        input_file = cli.input_file or cli.spec_in\n        if input_file is None:\n            print(\n                \"error: INPUT_FILE or --spec-in is required when using --config\", file=sys.stderr\n            )\n            sys.exit(1)\n        print(f\"Doing work using input {input_file} and config {cli.config}\")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>adityasz@github:clap-py$ python docs/docs/quickstart/04_04_custom.py --help\nUsage: 04_04_custom.py [OPTIONS] [INPUT_FILE]\n\nArguments:\n  [INPUT_FILE]  Some regular input\n\nOptions:\n      --set-ver &lt;VER&gt;      Set version manually\n      --major              Auto inc major\n      --minor              Auto inc minor\n      --patch              Auto inc patch\n      --spec-in &lt;SPEC_IN&gt;  Some special input argument\n  -c &lt;CONFIG&gt;\n  -h, --help               Print help\n  -V, --version            Print version</code></pre> <pre><code>adityasz@github:clap-py$ python docs/docs/quickstart/04_04_custom.py --major\nVersion: 2.2.3</code></pre> <pre><code>adityasz@github:clap-py$ python docs/docs/quickstart/04_04_custom.py --major -c config.toml --spec-in input.txt\nVersion: 2.2.3\nDoing work using input input.txt and config config.toml</code></pre>"},{"location":"quickstart/#docstrings","title":"Docstrings","text":"<pre><code>import clap\n\n@clap.command\nclass Cli(clap.Parser):\n    \"\"\"This is the short about (without the trailing period).\n\n    Any subsequent paragraphs are ignored in the short about. The long about\n    contains the entire docstring.\n    \"\"\"\n\n    input: str\n    \"\"\"Help messages are generated in a similar way.\n    Ellipsis are kept in the short help...\n\n    Paragraphs are separated by at least two newlines.\n    \"\"\"\n</code></pre> <p>Docstrings are processed just like <code>clap-rs</code>.</p>"},{"location":"quickstart/#help-output","title":"Help Output","text":"<p>See <code>ArgAction.Help</code>, <code>ArgAction.HelpLong</code>, and <code>ArgAction.HelpShort</code>.</p> <p>A custom template can be used, and styles can be customized using <code>Styles</code>.</p> <p>Here's the help output for <code>examples/typst.py</code>:</p> <pre><code>adityasz@github:clap-py$ python examples/typst.py --help\nUsage: typst [OPTIONS] &lt;COMMAND&gt;\n\nCommands:\n  watch  Watches an input file and recompiles on changes [aliases: w]\n  init   Initializes a new project from a template\n\nOptions:\n      --cert &lt;CERT&gt;\n          Path to a custom CA certificate to use when making network requests\n\n      --color &lt;COLOR&gt;\n          Whether to use color. When set to `auto` if the terminal to supports it\n\n          Possible values:\n          - auto: Enables colored output only when the output is going to a terminal or TTY\n          - always: Enables colored output regardless of whether or not the output is going to a\n                    terminal/TTY\n          - never: Disables colored output no matter if the output is going to a terminal/TTY, or\n                   not\n\n          [default: auto]\n\n  -h, --help\n          Print help</code></pre> <pre><code>adityasz@github:clap-py$ python examples/typst.py watch -h\nWatches an input file and recompiles on changes\n\nUsage: typst [OPTIONS] watch [OPTIONS] &lt;INPUT&gt; [OUTPUT]\n\nArguments:\n  &lt;INPUT&gt;   Path to input Typst file. Use `-` to read input from stdin\n  [OUTPUT]  Path to output file (PDF, PNG, SVG, or HTML). Use `-` to write output to stdout\n\nOptions:\n  -f, --format &lt;FORMAT&gt;      The format of the output file, inferred from the extension by default\n                             [possible values: pdf, png, svg, html]\n      --ignore-system-fonts  Ensures system fonts won't be searched, unless explicitly included via\n                             `--font-path`\n  -j, --jobs &lt;JOBS&gt;          Number of parallel jobs spawned during compilation. Defaults to number\n                             of CPUs\n  -h, --help                 Print help</code></pre> <pre><code>adityasz@github:clap-py$ python examples/typst.py watch --help\nWatches an input file and recompiles on changes\n\nUsage: typst [OPTIONS] watch [OPTIONS] &lt;INPUT&gt; [OUTPUT]\n\nArguments:\n  &lt;INPUT&gt;\n          Path to input Typst file. Use `-` to read input from stdin\n\n  [OUTPUT]\n          Path to output file (PDF, PNG, SVG, or HTML). Use `-` to write output to stdout.\n\n          For output formats emitting one file per page (PNG &amp; SVG), a page number template must be\n          present if the source document renders to multiple pages. Use `{p}` for page numbers,\n          `{0p}` for zero padded page numbers and `{t}` for page count. For example,\n          `page-{0p}-of-{t}.png` creates `page-01-of-10.png`, `page-02-of-10.png`, and so on.\n\nOptions:\n  -f, --format &lt;FORMAT&gt;      The format of the output file, inferred from the extension by default\n                             [possible values: pdf, png, svg, html]\n      --ignore-system-fonts  Ensures system fonts won't be searched, unless explicitly included via\n                             `--font-path`\n  -j, --jobs &lt;JOBS&gt;          Number of parallel jobs spawned during compilation. Defaults to number\n                             of CPUs\n  -h, --help                 Print help</code></pre>"},{"location":"quickstart/#sharp-edges","title":"Sharp edges","text":"<p>The decorators <code>@clap.command</code> and <code>@clap.subcommand</code> are decorated with <code>@dataclass_transform</code> to tell type checkers that they provide <code>dataclass</code>-like functionality (for example, pattern matching with positionals in <code>match</code>-<code>case</code>).</p> <p>This also brings some dataclass limitations: If fields without default values are present after fields with default values, the type checker complains. There are no runtime implications, but to satisfy the type checkers, the following (reasonable) workarounds can be used:</p> <ul> <li>For positionals where you don't need to modify the default behavior, you can   simply assign <code>arg()</code> if there are fields with default values above.</li> <li>For a field that contains the subcommand, nothing can be assigned.   So, keep this as the first field. (The order only matters for positionals;   the subcommand is always parsed after all the positionals and options.)</li> </ul> <p>See also:</p> <ul> <li>API Reference for complete   documentation.</li> <li>Examples for   application-focused examples.</li> </ul>"},{"location":"styling/","title":"Styling","text":"<p>Control the appearance and colors of your CLI help output.</p>"},{"location":"styling/#colorchoice","title":"ColorChoice","text":""},{"location":"styling/#clap.styling.ColorChoice","title":"clap.styling.ColorChoice","text":"<p>               Bases: <code>Enum</code></p> <p>Represents the color preferences for help output.</p> <p>Attributes:</p> <ul> <li> <code>Always</code>           \u2013            <p>Enables colored output regardless of whether or not the output is going to a terminal/TTY.</p> </li> <li> <code>Auto</code>           \u2013            <p>Enables colored output only when the output is going to a terminal or TTY.</p> </li> <li> <code>Never</code>           \u2013            <p>Disables colored output no matter if the output is going to a terminal/TTY, or not.</p> </li> </ul>"},{"location":"styling/#clap.styling.ColorChoice.Always","title":"Always  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Always = auto()\n</code></pre> <p>Enables colored output regardless of whether or not the output is going to a terminal/TTY.</p> <p>Example: <pre><code>import clap\nfrom clap import ColorChoice\n\n@clap.command(color=ColorChoice.Always)\nclass Cli:\n    ...\n</code></pre></p>"},{"location":"styling/#clap.styling.ColorChoice.Auto","title":"Auto  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Auto = auto()\n</code></pre> <p>Enables colored output only when the output is going to a terminal or TTY.</p> <p>Example: <pre><code>import clap\nfrom clap import ColorChoice\n\n@clap.command(color=ColorChoice.Auto)\nclass Cli:\n    ...\n</code></pre></p>"},{"location":"styling/#clap.styling.ColorChoice.Never","title":"Never  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Never = auto()\n</code></pre> <p>Disables colored output no matter if the output is going to a terminal/TTY, or not.</p> <p>Example: <pre><code>import clap\nfrom clap import ColorChoice\n\n@clap.command(color=ColorChoice.Never)\nclass Cli:\n    ...\n</code></pre></p>"},{"location":"styling/#ansicolor","title":"AnsiColor","text":""},{"location":"styling/#clap.styling.AnsiColor","title":"clap.styling.AnsiColor","text":"<p>               Bases: <code>IntEnum</code></p> <p>Available 4-bit ANSI color palette codes.</p> <p>The user's terminal defines the meaning of the each palette code.</p> <p>Attributes:</p> <ul> <li> <code>Black</code>           \u2013            <p>Black: #0 (foreground code <code>30</code>, background code <code>40</code>).</p> </li> <li> <code>Blue</code>           \u2013            <p>Blue: #4 (foreground code <code>34</code>, background code <code>44</code>).</p> </li> <li> <code>BrightBlack</code>           \u2013            <p>Bright black: #0 (foreground code <code>90</code>, background code <code>100</code>).</p> </li> <li> <code>BrightBlue</code>           \u2013            <p>Bright blue: #4 (foreground code <code>94</code>, background code <code>104</code>).</p> </li> <li> <code>BrightCyan</code>           \u2013            <p>Bright cyan: #6 (foreground code <code>96</code>, background code <code>106</code>).</p> </li> <li> <code>BrightGreen</code>           \u2013            <p>Bright green: #2 (foreground code <code>92</code>, background code <code>102</code>).</p> </li> <li> <code>BrightMagenta</code>           \u2013            <p>Bright magenta: #5 (foreground code <code>95</code>, background code <code>105</code>).</p> </li> <li> <code>BrightRed</code>           \u2013            <p>Bright red: #1 (foreground code <code>91</code>, background code <code>101</code>).</p> </li> <li> <code>BrightWhite</code>           \u2013            <p>Bright white: #7 (foreground code <code>97</code>, background code <code>107</code>).</p> </li> <li> <code>BrightYellow</code>           \u2013            <p>Bright yellow: #3 (foreground code <code>93</code>, background code <code>103</code>).</p> </li> <li> <code>Cyan</code>           \u2013            <p>Cyan: #6 (foreground code <code>36</code>, background code <code>46</code>).</p> </li> <li> <code>Green</code>           \u2013            <p>Green: #2 (foreground code <code>32</code>, background code <code>42</code>).</p> </li> <li> <code>Magenta</code>           \u2013            <p>Magenta: #5 (foreground code <code>35</code>, background code <code>45</code>).</p> </li> <li> <code>Red</code>           \u2013            <p>Red: #1 (foreground code <code>31</code>, background code <code>41</code>).</p> </li> <li> <code>White</code>           \u2013            <p>White: #7 (foreground code <code>37</code>, background code <code>47</code>).</p> </li> <li> <code>Yellow</code>           \u2013            <p>Yellow: #3 (foreground code <code>33</code>, background code <code>43</code>).</p> </li> </ul>"},{"location":"styling/#clap.styling.AnsiColor.Black","title":"Black  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Black = auto()\n</code></pre> <p>Black: #0 (foreground code <code>30</code>, background code <code>40</code>).</p>"},{"location":"styling/#clap.styling.AnsiColor.Blue","title":"Blue  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Blue = auto()\n</code></pre> <p>Blue: #4 (foreground code <code>34</code>, background code <code>44</code>).</p>"},{"location":"styling/#clap.styling.AnsiColor.BrightBlack","title":"BrightBlack  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>BrightBlack = auto()\n</code></pre> <p>Bright black: #0 (foreground code <code>90</code>, background code <code>100</code>).</p>"},{"location":"styling/#clap.styling.AnsiColor.BrightBlue","title":"BrightBlue  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>BrightBlue = auto()\n</code></pre> <p>Bright blue: #4 (foreground code <code>94</code>, background code <code>104</code>).</p>"},{"location":"styling/#clap.styling.AnsiColor.BrightCyan","title":"BrightCyan  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>BrightCyan = auto()\n</code></pre> <p>Bright cyan: #6 (foreground code <code>96</code>, background code <code>106</code>).</p>"},{"location":"styling/#clap.styling.AnsiColor.BrightGreen","title":"BrightGreen  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>BrightGreen = auto()\n</code></pre> <p>Bright green: #2 (foreground code <code>92</code>, background code <code>102</code>).</p>"},{"location":"styling/#clap.styling.AnsiColor.BrightMagenta","title":"BrightMagenta  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>BrightMagenta = auto()\n</code></pre> <p>Bright magenta: #5 (foreground code <code>95</code>, background code <code>105</code>).</p>"},{"location":"styling/#clap.styling.AnsiColor.BrightRed","title":"BrightRed  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>BrightRed = auto()\n</code></pre> <p>Bright red: #1 (foreground code <code>91</code>, background code <code>101</code>).</p>"},{"location":"styling/#clap.styling.AnsiColor.BrightWhite","title":"BrightWhite  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>BrightWhite = auto()\n</code></pre> <p>Bright white: #7 (foreground code <code>97</code>, background code <code>107</code>).</p>"},{"location":"styling/#clap.styling.AnsiColor.BrightYellow","title":"BrightYellow  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>BrightYellow = auto()\n</code></pre> <p>Bright yellow: #3 (foreground code <code>93</code>, background code <code>103</code>).</p>"},{"location":"styling/#clap.styling.AnsiColor.Cyan","title":"Cyan  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Cyan = auto()\n</code></pre> <p>Cyan: #6 (foreground code <code>36</code>, background code <code>46</code>).</p>"},{"location":"styling/#clap.styling.AnsiColor.Green","title":"Green  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Green = auto()\n</code></pre> <p>Green: #2 (foreground code <code>32</code>, background code <code>42</code>).</p>"},{"location":"styling/#clap.styling.AnsiColor.Magenta","title":"Magenta  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Magenta = auto()\n</code></pre> <p>Magenta: #5 (foreground code <code>35</code>, background code <code>45</code>).</p>"},{"location":"styling/#clap.styling.AnsiColor.Red","title":"Red  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Red = auto()\n</code></pre> <p>Red: #1 (foreground code <code>31</code>, background code <code>41</code>).</p>"},{"location":"styling/#clap.styling.AnsiColor.White","title":"White  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>White = auto()\n</code></pre> <p>White: #7 (foreground code <code>37</code>, background code <code>47</code>).</p>"},{"location":"styling/#clap.styling.AnsiColor.Yellow","title":"Yellow  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Yellow = auto()\n</code></pre> <p>Yellow: #3 (foreground code <code>33</code>, background code <code>43</code>).</p>"},{"location":"styling/#style","title":"Style","text":""},{"location":"styling/#clap.styling.Style","title":"clap.styling.Style  <code>dataclass</code>","text":"<pre><code>Style(\n    color_fg: Optional[AnsiColor] = None,\n    color_bg: Optional[AnsiColor] = None,\n    is_bold: bool = False,\n    is_dimmed: bool = False,\n    is_italic: bool = False,\n    is_underline: bool = False,\n)\n</code></pre> <p>ANSI text styling.</p> <p>You can print a <code>Style</code> to render the corresponding ANSI code. Using the alternate flag <code>#</code> will render the ANSI reset code, if needed. Together, this makes it convenient to render styles using inline format arguments.</p> <p>Example:</p> <pre><code>style = Style().bold()\nvalue = 42\nprint(f\"{style}value{style:#}\")\n</code></pre> <p>Methods:</p> <ul> <li> <code>bg_color</code>             \u2013              <p>Set background color.</p> </li> <li> <code>bold</code>             \u2013              <p>Apply <code>bold</code> effect.</p> </li> <li> <code>dimmed</code>             \u2013              <p>Apply <code>dimmed</code> effect.</p> </li> <li> <code>fg_color</code>             \u2013              <p>Set foreground color.</p> </li> <li> <code>italic</code>             \u2013              <p>Apply <code>italic</code> effect.</p> </li> <li> <code>render_bg</code>             \u2013              <p>Render the ANSI code for a background color.</p> </li> <li> <code>render_fg</code>             \u2013              <p>Render the ANSI code for a foreground color.</p> </li> <li> <code>render_reset</code>             \u2013              <p>Renders the ANSI reset code.</p> </li> <li> <code>underline</code>             \u2013              <p>Apply <code>underline</code> effect.</p> </li> </ul>"},{"location":"styling/#clap.styling.Style.bg_color","title":"bg_color","text":"<pre><code>bg_color(color: Optional[AnsiColor] = None) -&gt; Style\n</code></pre> <p>Set background color.</p> Source code in <code>clap/styling.py</code> <pre><code>def bg_color(self, color: Optional[AnsiColor] = None) -&gt; \"Style\":\n    \"\"\"Set background color.\"\"\"\n    self.color_bg = color\n    return self\n</code></pre>"},{"location":"styling/#clap.styling.Style.bold","title":"bold","text":"<pre><code>bold() -&gt; Style\n</code></pre> <p>Apply <code>bold</code> effect.</p> Source code in <code>clap/styling.py</code> <pre><code>def bold(self) -&gt; \"Style\":\n    \"\"\"Apply `bold` effect.\"\"\"\n    self.is_bold = True\n    return self\n</code></pre>"},{"location":"styling/#clap.styling.Style.dimmed","title":"dimmed","text":"<pre><code>dimmed() -&gt; Style\n</code></pre> <p>Apply <code>dimmed</code> effect.</p> Source code in <code>clap/styling.py</code> <pre><code>def dimmed(self) -&gt; \"Style\":\n    \"\"\"Apply `dimmed` effect.\"\"\"\n    self.is_dimmed = True\n    return self\n</code></pre>"},{"location":"styling/#clap.styling.Style.fg_color","title":"fg_color","text":"<pre><code>fg_color(color: Optional[AnsiColor] = None) -&gt; Style\n</code></pre> <p>Set foreground color.</p> Source code in <code>clap/styling.py</code> <pre><code>def fg_color(self, color: Optional[AnsiColor] = None) -&gt; \"Style\":\n    \"\"\"Set foreground color.\"\"\"\n    self.color_fg = color\n    return self\n</code></pre>"},{"location":"styling/#clap.styling.Style.italic","title":"italic","text":"<pre><code>italic() -&gt; Style\n</code></pre> <p>Apply <code>italic</code> effect.</p> Source code in <code>clap/styling.py</code> <pre><code>def italic(self) -&gt; \"Style\":\n    \"\"\"Apply `italic` effect.\"\"\"\n    self.is_italic = True\n    return self\n</code></pre>"},{"location":"styling/#clap.styling.Style.render_bg","title":"render_bg","text":"<pre><code>render_bg() -&gt; str\n</code></pre> <p>Render the ANSI code for a background color.</p> Source code in <code>clap/styling.py</code> <pre><code>def render_bg(self) -&gt; str:\n    \"\"\"Render the ANSI code for a background color.\"\"\"\n    match self.color_bg:\n        case None: return \"\"\n        case AnsiColor.Black: return \"40\"\n        case AnsiColor.Red: return \"41\"\n        case AnsiColor.Green: return \"42\"\n        case AnsiColor.Yellow: return \"43\"\n        case AnsiColor.Blue: return \"44\"\n        case AnsiColor.Magenta: return \"45\"\n        case AnsiColor.Cyan: return \"46\"\n        case AnsiColor.White: return \"47\"\n        case AnsiColor.BrightBlack: return \"100\"\n        case AnsiColor.BrightRed: return \"101\"\n        case AnsiColor.BrightGreen: return \"102\"\n        case AnsiColor.BrightYellow: return \"103\"\n        case AnsiColor.BrightBlue: return \"104\"\n        case AnsiColor.BrightMagenta: return \"105\"\n        case AnsiColor.BrightCyan: return \"106\"\n        case AnsiColor.BrightWhite: return \"107\"\n</code></pre>"},{"location":"styling/#clap.styling.Style.render_fg","title":"render_fg","text":"<pre><code>render_fg() -&gt; str\n</code></pre> <p>Render the ANSI code for a foreground color.</p> Source code in <code>clap/styling.py</code> <pre><code>def render_fg(self) -&gt; str:\n    \"\"\"Render the ANSI code for a foreground color.\"\"\"\n    match self.color_fg:\n        case None: return \"\"\n        case AnsiColor.Black: return \"30\"\n        case AnsiColor.Red: return \"31\"\n        case AnsiColor.Green: return \"32\"\n        case AnsiColor.Yellow: return \"33\"\n        case AnsiColor.Blue: return \"34\"\n        case AnsiColor.Magenta: return \"35\"\n        case AnsiColor.Cyan: return \"36\"\n        case AnsiColor.White: return \"37\"\n        case AnsiColor.BrightBlack: return \"90\"\n        case AnsiColor.BrightRed: return \"91\"\n        case AnsiColor.BrightGreen: return \"92\"\n        case AnsiColor.BrightYellow: return \"93\"\n        case AnsiColor.BrightBlue: return \"94\"\n        case AnsiColor.BrightMagenta: return \"95\"\n        case AnsiColor.BrightCyan: return \"96\"\n        case AnsiColor.BrightWhite: return \"97\"\n</code></pre>"},{"location":"styling/#clap.styling.Style.render_reset","title":"render_reset","text":"<pre><code>render_reset() -&gt; str\n</code></pre> <p>Renders the ANSI reset code.</p> <p>Ellides the code if there is nothing to reset.</p> Source code in <code>clap/styling.py</code> <pre><code>def render_reset(self) -&gt; str:\n    \"\"\"Renders the ANSI reset code.\n\n    Ellides the code if there is nothing to reset.\n    \"\"\"\n    if self != Style():\n        return \"\\033[0m\"\n    return \"\"\n</code></pre>"},{"location":"styling/#clap.styling.Style.underline","title":"underline","text":"<pre><code>underline() -&gt; Style\n</code></pre> <p>Apply <code>underline</code> effect.</p> Source code in <code>clap/styling.py</code> <pre><code>def underline(self) -&gt; \"Style\":\n    \"\"\"Apply `underline` effect.\"\"\"\n    self.is_underline = True\n    return self\n</code></pre>"},{"location":"styling/#styles","title":"Styles","text":""},{"location":"styling/#clap.styling.Styles","title":"clap.styling.Styles","text":"<pre><code>Styles()\n</code></pre> <p>Terminal styling definitions.</p> <p>Example:</p> <pre><code>from clap import AnsiColor, Style, Styles\n\nstyles = (Styles().header(Style().bold().underline())\n              .literal(Style().fg_color(AnsiColor.Green).bold()))\n</code></pre> <p>Methods:</p> <ul> <li> <code>header</code>             \u2013              <p>General heading style, e.g., <code>Commands</code>.</p> </li> <li> <code>literal</code>             \u2013              <p>Literal command-line syntax, e.g., <code>--help</code>.</p> </li> <li> <code>placeholder</code>             \u2013              <p>Descriptions within command-line syntax, e.g., <code>value_name</code>.</p> </li> <li> <code>styled</code>             \u2013              <p>Default terminal styling.</p> </li> <li> <code>usage</code>             \u2013              <p>Usage heading.</p> </li> </ul> Source code in <code>clap/styling.py</code> <pre><code>def __init__(self):\n    self.header_style = Style()\n    self.literal_style = Style()\n    self.usage_style = Style()\n    self.placeholder_style = Style()\n</code></pre>"},{"location":"styling/#clap.styling.Styles.header","title":"header","text":"<pre><code>header(style: Style) -&gt; Styles\n</code></pre> <p>General heading style, e.g., <code>Commands</code>.</p> Source code in <code>clap/styling.py</code> <pre><code>def header(self, style: Style) -&gt; \"Styles\":\n    \"\"\"General heading style, e.g., `Commands`.\"\"\"\n    self.header_style = style\n    return self\n</code></pre>"},{"location":"styling/#clap.styling.Styles.literal","title":"literal","text":"<pre><code>literal(style: Style) -&gt; Styles\n</code></pre> <p>Literal command-line syntax, e.g., <code>--help</code>.</p> Source code in <code>clap/styling.py</code> <pre><code>def literal(self, style: Style) -&gt; \"Styles\":\n    \"\"\"Literal command-line syntax, e.g., `--help`.\"\"\"\n    self.literal_style = style\n    return self\n</code></pre>"},{"location":"styling/#clap.styling.Styles.placeholder","title":"placeholder","text":"<pre><code>placeholder(style: Style) -&gt; Styles\n</code></pre> <p>Descriptions within command-line syntax, e.g., <code>value_name</code>.</p> Source code in <code>clap/styling.py</code> <pre><code>def placeholder(self, style: Style) -&gt; \"Styles\":\n    \"\"\"Descriptions within command-line syntax, e.g., `value_name`.\"\"\"\n    self.placeholder_style = style\n    return self\n</code></pre>"},{"location":"styling/#clap.styling.Styles.styled","title":"styled  <code>classmethod</code>","text":"<pre><code>styled() -&gt; Styles\n</code></pre> <p>Default terminal styling.</p> Source code in <code>clap/styling.py</code> <pre><code>@classmethod\ndef styled(cls) -&gt; \"Styles\":\n    \"\"\"Default terminal styling.\"\"\"\n    return (Styles().header(Style().bold().underline())\n                .literal(Style().bold())\n                .usage(Style().bold().underline())\n                .placeholder(Style()))\n</code></pre>"},{"location":"styling/#clap.styling.Styles.usage","title":"usage","text":"<pre><code>usage(style: Style) -&gt; Styles\n</code></pre> <p>Usage heading.</p> Source code in <code>clap/styling.py</code> <pre><code>def usage(self, style: Style) -&gt; \"Styles\":\n    \"\"\"Usage heading.\"\"\"\n    self.usage_style = style\n    return self\n</code></pre>"},{"location":"styling/#functions","title":"Functions","text":""},{"location":"styling/#clap.styling.determine_color_usage","title":"clap.styling.determine_color_usage","text":"<pre><code>determine_color_usage(color_choice: ColorChoice) -&gt; bool\n</code></pre> Source code in <code>clap/styling.py</code> <pre><code>def determine_color_usage(color_choice: ColorChoice) -&gt; bool:\n    match color_choice:\n        case ColorChoice.Never:\n            return False\n        case ColorChoice.Always:\n            return True\n        case ColorChoice.Auto:\n            return sys.stdout.isatty()\n</code></pre>"},{"location":"subcommand/","title":"subcommand","text":""},{"location":"subcommand/#clap.subcommand","title":"clap.subcommand","text":"<pre><code>subcommand(cls: type[T]) -&gt; type[T]\n</code></pre><pre><code>subcommand(\n    *,\n    name: str = ...,\n    version: Optional[str] = None,\n    long_version: Optional[str] = None,\n    aliases: Sequence[str] = ...,\n    usage: Optional[str] = ...,\n    about: Optional[str] = ...,\n    long_about: Optional[str] = ...,\n    before_help: Optional[str] = None,\n    before_long_help: Optional[str] = ...,\n    after_help: Optional[str] = None,\n    after_long_help: Optional[str] = ...,\n    subcommand_help_heading: Optional[str] = ...,\n    subcommand_value_name: Optional[str] = ...,\n    color: Optional[ColorChoice] = ...,\n    help_styles: Optional[Styles] = ...,\n    help_template: Optional[str] = ...,\n    max_term_width: Optional[int] = ...,\n    propagate_version: bool = False,\n    disable_version_flag: bool = False,\n    disable_help_flag: bool = False,\n    prefix_chars: str = \"-\",\n    fromfile_prefix_chars: Optional[str] = None,\n    conflict_handler: str = ...,\n    allow_abbrev: bool = ...,\n    exit_on_error: bool = ...,\n    deprecated: bool = False,\n) -&gt; Callable[[type[T]], type[T]]\n</code></pre> <pre><code>subcommand(\n    cls: Optional[type[T]] = None,\n    /,\n    *,\n    name: Optional[str] = None,\n    version: Optional[str] = None,\n    long_version: Optional[str] = None,\n    usage: Optional[str] = None,\n    aliases: Sequence[str] = (),\n    about: Optional[str] = None,\n    long_about: Optional[str] = None,\n    before_help: Optional[str] = None,\n    before_long_help: Optional[str] = None,\n    after_help: Optional[str] = None,\n    after_long_help: Optional[str] = None,\n    subcommand_help_heading: str = \"Commands\",\n    subcommand_value_name: str = \"COMMAND\",\n    color: Optional[ColorChoice] = None,\n    styles: Optional[Styles] = None,\n    help_template: Optional[str] = None,\n    max_term_width: Optional[int] = None,\n    propagate_version: bool = False,\n    disable_version_flag: bool = False,\n    disable_help_flag: bool = False,\n    prefix_chars: str = \"-\",\n    fromfile_prefix_chars: Optional[str] = None,\n    conflict_handler: Optional[str] = None,\n    allow_abbrev: Optional[bool] = None,\n    exit_on_error: Optional[bool] = None,\n    deprecated: bool = False,\n) -&gt; Union[type[T], Callable[[type[T]], type[T]]]\n</code></pre> <p>Configure a class as a subcommand parser.</p> <p>Parameters:</p> <ul> <li> <code>cls</code>               (<code>Optional[type[T]]</code>, default:                   <code>None</code> )           \u2013            <p>The class to be decorated (when used without parentheses).</p> </li> <li> <code>name</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>Overrides the runtime-determined name of the program.</p> </li> <li> <code>version</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>Sets the version for the short version (<code>-V</code>) and help messages.</p> </li> <li> <code>long_version</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>Sets the version for the long version (<code>--version</code>) and help messages.</p> </li> <li> <code>usage</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>The string describing the program usage. The default is generated from arguments added to parser.</p> </li> <li> <code>aliases</code>               (<code>Sequence[str]</code>, default:                   <code>()</code> )           \u2013            <p>The aliases to this subcommand.</p> </li> <li> <code>about</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>The subcommand's description for the short help (<code>-h</code>).</p> </li> <li> <code>long_about</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>The subcommand's description for the long help (<code>--help</code>).</p> </li> <li> <code>after_help</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>Free-form help text for after auto-generated short help (<code>-h</code>).</p> </li> <li> <code>after_long_help</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>Free-form help text for after auto-generated long help (<code>--help</code>).</p> </li> <li> <code>before_help</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>Free-form help text for before auto-generated short help (<code>-h</code>).</p> </li> <li> <code>before_long_help</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>Free-form help text for before auto-generated long help (<code>--help</code>).</p> </li> <li> <code>subcommand_help_heading</code>               (<code>str</code>, default:                   <code>'Commands'</code> )           \u2013            <p>The help heading used for subcommands when printing help.</p> </li> <li> <code>subcommand_value_name</code>               (<code>str</code>, default:                   <code>'COMMAND'</code> )           \u2013            <p>The value name used for subcommands when printing usage and help.</p> </li> <li> <code>color</code>               (<code>Optional[ColorChoice]</code>, default:                   <code>None</code> )           \u2013            <p>When to color output.</p> </li> <li> <code>styles</code>               (<code>Optional[Styles]</code>, default:                   <code>None</code> )           \u2013            <p>The styles for help output.</p> </li> <li> <code>help_template</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>The help template to be used, overriding the default format.</p> </li> <li> <code>max_term_width</code>               (<code>Optional[int]</code>, default:                   <code>None</code> )           \u2013            <p>The help output will wrap to <code>min(max_term_width, shutil.get_terminal_size())</code>.</p> </li> <li> <code>propagate_version</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to use the version of the current command for all subcommands.</p> </li> <li> <code>disable_version_flag</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Disable the <code>-V</code> and <code>--version</code> flags.</p> </li> <li> <code>disable_help_flag</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Disable the <code>-h</code> and <code>--help</code> flags.</p> </li> <li> <code>prefix_chars</code>               (<code>str</code>, default:                   <code>'-'</code> )           \u2013            <p>The set of characters that prefix optional arguments.</p> </li> <li> <code>fromfile_prefix_chars</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>The set of characters that prefix files from which additional arguments should be read.</p> </li> <li> <code>conflict_handler</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>The strategy for resolving conflicting optionals.</p> </li> <li> <code>allow_abbrev</code>               (<code>Optional[bool]</code>, default:                   <code>None</code> )           \u2013            <p>Whether to allow long options to be abbreviated if the abbreviation is unambiguous.</p> </li> <li> <code>exit_on_error</code>               (<code>Optional[bool]</code>, default:                   <code>None</code> )           \u2013            <p>Whether <code>ArgumentParser</code> exits with error info when an error occurs.</p> </li> <li> <code>deprecated</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether this subcommand is deprecated.</p> </li> </ul> <p>Example:</p> <pre><code>import clap\nfrom typing import Union\n\n@clap.subcommand(aliases=(\"w\", \"wat\"))\nclass Watch:\n    \"\"\"Watches an input file and recompiles on changes.\"\"\"\n    ...\n\n@clap.subcommand\nclass Init:\n    \"\"\"Initializes a new project from a template.\"\"\"\n    ...\n\n@clap.command(name=\"typst\")\nclass Cli(clap.Parser):\n    command: Union[Watch, Init]\n    ...\n</code></pre> Source code in <code>clap/api.py</code> <pre><code>@dataclass_transform()\ndef subcommand[T](\n    cls: Optional[type[T]] = None,\n    /,\n    *,\n    name: Optional[str] = None,\n    version: Optional[str] = None,\n    long_version: Optional[str] = None,\n    usage: Optional[str] = None,\n    aliases: Sequence[str] = (),\n    about: Optional[str] = None,\n    long_about: Optional[str] = None,\n    before_help: Optional[str] = None,\n    before_long_help: Optional[str] = None,\n    after_help: Optional[str] = None,\n    after_long_help: Optional[str] = None,\n    subcommand_help_heading: str = \"Commands\",\n    subcommand_value_name: str = \"COMMAND\",\n    color: Optional[ColorChoice] = None,\n    styles: Optional[Styles] = None,\n    help_template: Optional[str] = None,\n    max_term_width: Optional[int] = None,\n    propagate_version: bool = False,\n    disable_version_flag: bool = False,\n    disable_help_flag: bool = False,\n    prefix_chars: str = \"-\",\n    fromfile_prefix_chars: Optional[str] = None,\n    conflict_handler: Optional[str] = None,\n    allow_abbrev: Optional[bool] = None,\n    exit_on_error: Optional[bool] = None,\n    deprecated: bool = False,\n) -&gt; Union[type[T], Callable[[type[T]], type[T]]]:\n    \"\"\"Configure a class as a subcommand parser.\n\n    Args:\n        cls: The class to be decorated (when used without parentheses).\n        name: Overrides the runtime-determined name of the program.\n        version: Sets the version for the short version (`-V`) and help messages.\n        long_version: Sets the version for the long version (`--version`) and help messages.\n        usage: The string describing the program usage. The default is\n            generated from arguments added to parser.\n        aliases: The aliases to this subcommand.\n        about: The subcommand's description for the short help (`-h`).\n        long_about: The subcommand's description for the long help (`--help`).\n        after_help: Free-form help text for after auto-generated short help (`-h`).\n        after_long_help: Free-form help text for after auto-generated long help (`--help`).\n        before_help: Free-form help text for before auto-generated short help (`-h`).\n        before_long_help: Free-form help text for before auto-generated long help (`--help`).\n        subcommand_help_heading: The help heading used for subcommands when printing help.\n        subcommand_value_name: The value name used for subcommands when printing usage and help.\n        color: When to color output.\n        styles: The styles for help output.\n        help_template: The help template to be used, overriding the default format.\n        max_term_width: The help output will wrap to\n            `min(max_term_width, shutil.get_terminal_size())`.\n        propagate_version: Whether to use the version of the current command for all subcommands.\n        disable_version_flag: Disable the `-V` and `--version` flags.\n        disable_help_flag: Disable the `-h` and `--help` flags.\n        prefix_chars: The set of characters that prefix optional arguments.\n        fromfile_prefix_chars: The set of characters that prefix files from\n            which additional arguments should be read.\n        conflict_handler: The strategy for resolving conflicting optionals.\n        allow_abbrev: Whether to allow long options to be abbreviated if the\n            abbreviation is unambiguous.\n        exit_on_error: Whether `ArgumentParser` exits with error info when an error occurs.\n        deprecated: Whether this subcommand is deprecated.\n\n    Example:\n\n    ```python\n    import clap\n    from typing import Union\n\n    @clap.subcommand(aliases=(\"w\", \"wat\"))\n    class Watch:\n        \\\"\"\"Watches an input file and recompiles on changes.\\\"\"\"\n        ...\n\n    @clap.subcommand\n    class Init:\n        \\\"\"\"Initializes a new project from a template.\\\"\"\"\n        ...\n\n    @clap.command(name=\"typst\")\n    class Cli(clap.Parser):\n        command: Union[Watch, Init]\n        ...\n    ```\n    \"\"\"\n\n    def wrap(cls: type[T]) -&gt; type[T]:\n        nonlocal about, long_about, name\n        if name is None:\n            name = to_kebab_case(cls.__name__)\n        if cls.__doc__ is not None:\n            doc_about, doc_long_about = get_help_from_docstring(cls.__doc__.strip())\n            if about is None:\n                about = doc_about\n            if long_about is None:\n                long_about = doc_long_about\n        command = Command(\n            name=name,\n            aliases=aliases,\n            usage=usage,\n            version=version,\n            long_version=long_version,\n            about=about,\n            long_about=long_about,\n            before_help=before_help,\n            before_long_help=before_long_help,\n            after_help=after_help,\n            after_long_help=after_long_help,\n            subcommand_help_heading=subcommand_help_heading,\n            subcommand_value_name=subcommand_value_name,\n            color=color,\n            styles=styles,\n            help_template=help_template,\n            max_term_width=max_term_width,\n            propagate_version=propagate_version,\n            disable_version_flag=disable_version_flag,\n            disable_help_flag=disable_help_flag,\n            prefix_chars=prefix_chars,\n            fromfile_prefix_chars=fromfile_prefix_chars,\n            conflict_handler=conflict_handler,\n            allow_abbrev=allow_abbrev,\n            exit_on_error=exit_on_error,\n            deprecated=deprecated,\n        )\n        setattr(cls, _SUBCOMMAND_MARKER, True)\n        setattr(cls, _COMMAND_DATA, command)\n\n        # delete default values of fields so that `dataclass` does not complain\n        # about mutable defaults (`Arg`)\n        attrs = {}\n        for name in cls.__annotations__:\n            if attr := getattr(cls, name, None):\n                attrs[name] = attr\n                delattr(cls, name)\n        setattr(cls, _SUBCOMMAND_DEFAULTS, attrs)\n\n        dataclass(cls, slots=True)\n\n        return cls\n\n    if cls is None:\n        return wrap\n    return wrap(cls)\n</code></pre>"}]}