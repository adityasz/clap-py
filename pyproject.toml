[project]
name = "clap-py"
authors = [{name = "Aditya Singh", email = "1adityasingh@proton.me"}]
maintainers = [{name = "Aditya Singh", email = "1adityasingh@proton.me"}]
version = "0.6.0"
description = "A declarative and type-safe command-line argument parser."
readme = "README.md"
license = "MIT"
requires-python = ">=3.13"
dependencies = []

[project.urls]
Homepage = "https://github.com/adityasz/clap-py"
Documentation = "https://adityasz.github.io/clap-py"
Repository = "https://github.com/adityasz/clap-py.git"
Issues = "https://github.com/adityasz/clap-py/issues"
# TODO: Changelog

[build-system]
requires = ["uv_build>=0.8.22,<0.9.0"]
build-backend = "uv_build"

[tool.uv.build-backend]
module-name = "clap"
module-root = ""

[dependency-groups]
dev = [
    "basedpyright>=1.31.5",
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.6.20",
    "mkdocstrings[python]>=0.30.1",
    "pymdown-extensions>=10.16.1",
    "pytest>=8.4.2",
    "rich>=14.1.0",
    "ruff>=0.13.2",
]

[project.entry-points."mkdocs.plugins"]
insert_stdout = "docs.plugins.insert_stdout:InsertStdoutPlugin"

[tool.ruff]
line-length = 99

[tool.ruff.format]
preview = true
docstring-code-format = true

[tool.ruff.lint]
preview = true
select = ["E", "F", "UP", "B", "SIM", "I"]
ignore = ["UP007", "UP045", "E701", "SIM108"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.basedpyright]
reportAny = false                   # is this rule a joke?
reportExplicitAny = false           # is this rule a joke?
deprecateTypingAliases = false      # this rule is incorrect as Union and Optional are not deprecated; `Optional[int]` is objectively better than `int | None`
reportUnknownMemberType = false     # because `v = []; v.append(1)` is perfectly fine and requires no annotations (Rust: `let mut v = Vec::new(); v.push(1);`)
reportUnknownVariableType = false   # because pyright is too dumb to infer types sometimes
reportUnknownLambdaType = false     # because pyright is too dumb to infer types sometimes
reportUnknownArgumentType = false   # to pass variables where pyright can't infer types
reportUnknownParameterType = false  # to accept `*args`, `**kwargs`
reportMissingParameterType = false  # to accept `*args`, `**kwargs`
reportUnusedCallResult = false      # for marimo
reportPrivateUsage = false          # python does not enforce public/private; if someone types a `_`, they know what they are doing
reportImportCycles = false          # python does not have forward declarations
reportUnannotatedClassAttribute = false
reportImplicitStringConcatenation = false
reportUnusedParameter = "hint"
